
C:\Users\nimal\Desktop\e\gpio_set_interrupt\Debug\gpio_set_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001db0  08001db0  00011db0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  7 .bss          00000040  20000068  20000068  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a8  200000a8  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_line   000023b0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00005cb9  00000000  00000000  00022448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001333  00000000  00000000  00028101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003f8  00000000  00000000  00029438  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005c8  00000000  00000000  00029830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000135b  00000000  00000000  00029df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000161d  00000000  00000000  0002b153  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0002c770  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000ba0  00000000  00000000  0002c7f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d98 	.word	0x08001d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08001d98 	.word	0x08001d98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000276:	e003      	b.n	8000280 <LoopCopyDataInit>

08000278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800027a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800027c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800027e:	3104      	adds	r1, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000288:	d3f6      	bcc.n	8000278 <CopyDataInit>
	ldr	r2, =_sbss
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800028c:	e002      	b.n	8000294 <LoopFillZerobss>

0800028e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800028e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000290:	f842 3b04 	str.w	r3, [r2], #4

08000294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <LoopForever+0x16>)
	cmp	r2, r3
 8000296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000298:	d3f9      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800029a:	f001 f8f3 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029e:	f001 f925 	bl	80014ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002a2:	f000 fe99 	bl	8000fd8 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002a8:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80002ac:	08001e34 	.word	0x08001e34
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002b4:	20000068 	.word	0x20000068
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80002b8:	20000068 	.word	0x20000068
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80002bc:	200000a8 	.word	0x200000a8

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80002ca:	6818      	ldr	r0, [r3, #0]
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002d4:	f000 f88a 	bl	80003ec <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002d8:	2200      	movs	r2, #0
 80002da:	4621      	mov	r1, r4
 80002dc:	f04f 30ff 	mov.w	r0, #4294967295
 80002e0:	f000 f844 	bl	800036c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000000 	.word	0x20000000

080002ec <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002ee:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002f8:	2003      	movs	r0, #3
 80002fa:	f000 f825 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ffe0 	bl	80002c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000304:	f000 ffd4 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000308:	2000      	movs	r0, #0
 800030a:	bd08      	pop	{r3, pc}
 800030c:	40022000 	.word	0x40022000

08000310 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000310:	4a02      	ldr	r2, [pc, #8]	; (800031c <HAL_IncTick+0xc>)
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	6013      	str	r3, [r2, #0]
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000090 	.word	0x20000090

08000320 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000320:	4b01      	ldr	r3, [pc, #4]	; (8000328 <HAL_GetTick+0x8>)
 8000322:	6818      	ldr	r0, [r3, #0]
}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000090 	.word	0x20000090

0800032c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800032c:	b513      	push	{r0, r1, r4, lr}
 800032e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000330:	f7ff fff6 	bl	8000320 <HAL_GetTick>
 8000334:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000336:	f7ff fff3 	bl	8000320 <HAL_GetTick>
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	1b00      	subs	r0, r0, r4
 800033e:	4298      	cmp	r0, r3
 8000340:	d3f9      	bcc.n	8000336 <HAL_Delay+0xa>
  {
  }
}
 8000342:	b002      	add	sp, #8
 8000344:	bd10      	pop	{r4, pc}
	...

08000348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800034a:	68d3      	ldr	r3, [r2, #12]
 800034c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000350:	041b      	lsls	r3, r3, #16
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000358:	0200      	lsls	r0, r0, #8
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000362:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000364:	60d3      	str	r3, [r2, #12]
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_NVIC_SetPriority+0x60>)
 800036e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000374:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000376:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	2c04      	cmp	r4, #4
 800037e:	bf28      	it	cs
 8000380:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	2d06      	cmp	r5, #6

  return (
 8000384:	f04f 0501 	mov.w	r5, #1
 8000388:	fa05 f404 	lsl.w	r4, r5, r4
 800038c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000390:	bf8c      	ite	hi
 8000392:	3b03      	subhi	r3, #3
 8000394:	2300      	movls	r3, #0

  return (
 8000396:	400c      	ands	r4, r1
 8000398:	409c      	lsls	r4, r3
 800039a:	fa05 f303 	lsl.w	r3, r5, r3
 800039e:	3b01      	subs	r3, #1
 80003a0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80003a2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80003a4:	ea42 0204 	orr.w	r2, r2, r4
 80003a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	bfaf      	iteee	ge
 80003ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	f000 000f 	andlt.w	r0, r0, #15
 80003b6:	4b06      	ldrlt	r3, [pc, #24]	; (80003d0 <HAL_NVIC_SetPriority+0x64>)
 80003b8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	bfa5      	ittet	ge
 80003bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003c0:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000ed14 	.word	0xe000ed14

080003d4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003d4:	0942      	lsrs	r2, r0, #5
 80003d6:	2301      	movs	r3, #1
 80003d8:	f000 001f 	and.w	r0, r0, #31
 80003dc:	fa03 f000 	lsl.w	r0, r3, r0
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <HAL_NVIC_EnableIRQ+0x14>)
 80003e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003e6:	4770      	bx	lr
 80003e8:	e000e100 	.word	0xe000e100

080003ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	3801      	subs	r0, #1
 80003ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003f2:	d20a      	bcs.n	800040a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	21f0      	movs	r1, #240	; 0xf0
 80003fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000400:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000402:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800041c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041e:	bf0c      	ite	eq
 8000420:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000424:	f022 0204 	bicne.w	r2, r2, #4
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	4770      	bx	lr
 800042c:	e000e010 	.word	0xe000e010

08000430 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000430:	4770      	bx	lr

08000432 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000432:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000434:	f7ff fffc 	bl	8000430 <HAL_SYSTICK_Callback>
 8000438:	bd08      	pop	{r3, pc}
	...

0800043c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000440:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80005c8 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000444:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80005cc <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800044a:	b085      	sub	sp, #20
 800044c:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800044e:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000450:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000452:	9a01      	ldr	r2, [sp, #4]
 8000454:	40da      	lsrs	r2, r3
 8000456:	f000 80b1 	beq.w	80005bc <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800045a:	2201      	movs	r2, #1
 800045c:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 8000460:	9a01      	ldr	r2, [sp, #4]
 8000462:	ea12 060a 	ands.w	r6, r2, sl
 8000466:	f000 80a7 	beq.w	80005b8 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800046a:	684a      	ldr	r2, [r1, #4]
 800046c:	f022 0e10 	bic.w	lr, r2, #16
 8000470:	f1be 0f02 	cmp.w	lr, #2
 8000474:	d114      	bne.n	80004a0 <HAL_GPIO_Init+0x64>
 8000476:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800047a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800047e:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000482:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000486:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800048a:	250f      	movs	r5, #15
 800048c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000490:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000494:	690f      	ldr	r7, [r1, #16]
 8000496:	fa07 f70b 	lsl.w	r7, r7, fp
 800049a:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 800049c:	f8cc 7020 	str.w	r7, [ip, #32]
 80004a0:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004a4:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004a6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004a8:	fa07 fc0b 	lsl.w	ip, r7, fp
 80004ac:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004b0:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004b2:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004b6:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ba:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004be:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c0:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80004c4:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c6:	d810      	bhi.n	80004ea <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004c8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 80004ca:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80004cc:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80004d0:	fa07 f70b 	lsl.w	r7, r7, fp
 80004d4:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80004d6:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004d8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004da:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80004de:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80004e2:	409d      	lsls	r5, r3
 80004e4:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 80004e8:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004ea:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80004ec:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80004f0:	688d      	ldr	r5, [r1, #8]
 80004f2:	fa05 f50b 	lsl.w	r5, r5, fp
 80004f6:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 80004fa:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fc:	00d5      	lsls	r5, r2, #3
 80004fe:	d55b      	bpl.n	80005b8 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000500:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000504:	f045 0501 	orr.w	r5, r5, #1
 8000508:	f8c8 5018 	str.w	r5, [r8, #24]
 800050c:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000510:	f023 0e03 	bic.w	lr, r3, #3
 8000514:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000518:	f005 0501 	and.w	r5, r5, #1
 800051c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000520:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000522:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000528:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800052c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000530:	270f      	movs	r7, #15
 8000532:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000536:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800053a:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800053e:	d011      	beq.n	8000564 <HAL_GPIO_Init+0x128>
 8000540:	4f20      	ldr	r7, [pc, #128]	; (80005c4 <HAL_GPIO_Init+0x188>)
 8000542:	42b8      	cmp	r0, r7
 8000544:	d010      	beq.n	8000568 <HAL_GPIO_Init+0x12c>
 8000546:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800054a:	42b8      	cmp	r0, r7
 800054c:	d00e      	beq.n	800056c <HAL_GPIO_Init+0x130>
 800054e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000552:	42b8      	cmp	r0, r7
 8000554:	d00c      	beq.n	8000570 <HAL_GPIO_Init+0x134>
 8000556:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800055a:	42b8      	cmp	r0, r7
 800055c:	bf14      	ite	ne
 800055e:	2705      	movne	r7, #5
 8000560:	2704      	moveq	r7, #4
 8000562:	e006      	b.n	8000572 <HAL_GPIO_Init+0x136>
 8000564:	2700      	movs	r7, #0
 8000566:	e004      	b.n	8000572 <HAL_GPIO_Init+0x136>
 8000568:	2701      	movs	r7, #1
 800056a:	e002      	b.n	8000572 <HAL_GPIO_Init+0x136>
 800056c:	2702      	movs	r7, #2
 800056e:	e000      	b.n	8000572 <HAL_GPIO_Init+0x136>
 8000570:	2703      	movs	r7, #3
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 800057a:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800057e:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000582:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000584:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000588:	bf0c      	ite	eq
 800058a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800058c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800058e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000590:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000592:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000596:	bf0c      	ite	eq
 8000598:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800059a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800059c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800059e:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005a0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80005a4:	bf0c      	ite	eq
 80005a6:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80005a8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80005aa:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80005ac:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005ae:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80005b0:	bf54      	ite	pl
 80005b2:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80005b4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80005b6:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 80005b8:	3301      	adds	r3, #1
 80005ba:	e74a      	b.n	8000452 <HAL_GPIO_Init+0x16>
  }
}
 80005bc:	b005      	add	sp, #20
 80005be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c2:	bf00      	nop
 80005c4:	48000400 	.word	0x48000400
 80005c8:	40010400 	.word	0x40010400
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80005d0:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80005d2:	4219      	tst	r1, r3
}
 80005d4:	bf14      	ite	ne
 80005d6:	2001      	movne	r0, #1
 80005d8:	2000      	moveq	r0, #0
 80005da:	4770      	bx	lr

080005dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005dc:	b10a      	cbz	r2, 80005e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005de:	6181      	str	r1, [r0, #24]
 80005e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005e2:	6281      	str	r1, [r0, #40]	; 0x28
 80005e4:	4770      	bx	lr

080005e6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e6:	4770      	bx	lr

080005e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80005e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80005ec:	6959      	ldr	r1, [r3, #20]
 80005ee:	4201      	tst	r1, r0
 80005f0:	d002      	beq.n	80005f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80005f4:	f7ff fff7 	bl	80005e6 <HAL_GPIO_EXTI_Callback>
 80005f8:	bd08      	pop	{r3, pc}
 80005fa:	bf00      	nop
 80005fc:	40010400 	.word	0x40010400

08000600 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000600:	4770      	bx	lr
	...

08000604 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000604:	b510      	push	{r4, lr}
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000606:	4c05      	ldr	r4, [pc, #20]	; (800061c <HAL_PWR_PVD_IRQHandler+0x18>)
 8000608:	6963      	ldr	r3, [r4, #20]
 800060a:	03db      	lsls	r3, r3, #15
 800060c:	d504      	bpl.n	8000618 <HAL_PWR_PVD_IRQHandler+0x14>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800060e:	f7ff fff7 	bl	8000600 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	6163      	str	r3, [r4, #20]
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	40010400 	.word	0x40010400

08000620 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000620:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000622:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000626:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000628:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062a:	d403      	bmi.n	8000634 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800062c:	682b      	ldr	r3, [r5, #0]
 800062e:	079c      	lsls	r4, r3, #30
 8000630:	d471      	bmi.n	8000716 <HAL_RCC_OscConfig+0xf6>
 8000632:	e0f0      	b.n	8000816 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000634:	4cb3      	ldr	r4, [pc, #716]	; (8000904 <HAL_RCC_OscConfig+0x2e4>)
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	f003 030c 	and.w	r3, r3, #12
 800063c:	2b04      	cmp	r3, #4
 800063e:	d007      	beq.n	8000650 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000640:	6863      	ldr	r3, [r4, #4]
 8000642:	f003 030c 	and.w	r3, r3, #12
 8000646:	2b08      	cmp	r3, #8
 8000648:	d116      	bne.n	8000678 <HAL_RCC_OscConfig+0x58>
 800064a:	6863      	ldr	r3, [r4, #4]
 800064c:	03d8      	lsls	r0, r3, #15
 800064e:	d513      	bpl.n	8000678 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000654:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000658:	6822      	ldr	r2, [r4, #0]
 800065a:	fa93 f3a3 	rbit	r3, r3
 800065e:	fab3 f383 	clz	r3, r3
 8000662:	f003 031f 	and.w	r3, r3, #31
 8000666:	fa22 f303 	lsr.w	r3, r2, r3
 800066a:	07d9      	lsls	r1, r3, #31
 800066c:	d5de      	bpl.n	800062c <HAL_RCC_OscConfig+0xc>
 800066e:	686b      	ldr	r3, [r5, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1db      	bne.n	800062c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000674:	2001      	movs	r0, #1
 8000676:	e233      	b.n	8000ae0 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000678:	686b      	ldr	r3, [r5, #4]
 800067a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800067e:	d007      	beq.n	8000690 <HAL_RCC_OscConfig+0x70>
 8000680:	6822      	ldr	r2, [r4, #0]
 8000682:	b14b      	cbz	r3, 8000698 <HAL_RCC_OscConfig+0x78>
 8000684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000688:	d106      	bne.n	8000698 <HAL_RCC_OscConfig+0x78>
 800068a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800068e:	6022      	str	r2, [r4, #0]
 8000690:	6822      	ldr	r2, [r4, #0]
 8000692:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000696:	e005      	b.n	80006a4 <HAL_RCC_OscConfig+0x84>
 8000698:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800069c:	6022      	str	r2, [r4, #0]
 800069e:	6822      	ldr	r2, [r4, #0]
 80006a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006a4:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80006a8:	f022 010f 	bic.w	r1, r2, #15
 80006ac:	68aa      	ldr	r2, [r5, #8]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006b2:	b1c3      	cbz	r3, 80006e6 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006b4:	f7ff fe34 	bl	8000320 <HAL_GetTick>
 80006b8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006bc:	4607      	mov	r7, r0
 80006be:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006c2:	6822      	ldr	r2, [r4, #0]
 80006c4:	fa96 f3a6 	rbit	r3, r6
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	f003 031f 	and.w	r3, r3, #31
 80006d0:	fa22 f303 	lsr.w	r3, r2, r3
 80006d4:	07da      	lsls	r2, r3, #31
 80006d6:	d4a9      	bmi.n	800062c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006d8:	f7ff fe22 	bl	8000320 <HAL_GetTick>
 80006dc:	1bc0      	subs	r0, r0, r7
 80006de:	2864      	cmp	r0, #100	; 0x64
 80006e0:	d9ed      	bls.n	80006be <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80006e2:	2003      	movs	r0, #3
 80006e4:	e1fc      	b.n	8000ae0 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006e6:	f7ff fe1b 	bl	8000320 <HAL_GetTick>
 80006ea:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006ee:	4607      	mov	r7, r0
 80006f0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006f4:	6822      	ldr	r2, [r4, #0]
 80006f6:	fa96 f3a6 	rbit	r3, r6
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	f003 031f 	and.w	r3, r3, #31
 8000702:	fa22 f303 	lsr.w	r3, r2, r3
 8000706:	07db      	lsls	r3, r3, #31
 8000708:	d590      	bpl.n	800062c <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800070a:	f7ff fe09 	bl	8000320 <HAL_GetTick>
 800070e:	1bc0      	subs	r0, r0, r7
 8000710:	2864      	cmp	r0, #100	; 0x64
 8000712:	d9ed      	bls.n	80006f0 <HAL_RCC_OscConfig+0xd0>
 8000714:	e7e5      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000716:	4c7b      	ldr	r4, [pc, #492]	; (8000904 <HAL_RCC_OscConfig+0x2e4>)
 8000718:	6863      	ldr	r3, [r4, #4]
 800071a:	f013 0f0c 	tst.w	r3, #12
 800071e:	d007      	beq.n	8000730 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000720:	6863      	ldr	r3, [r4, #4]
 8000722:	f003 030c 	and.w	r3, r3, #12
 8000726:	2b08      	cmp	r3, #8
 8000728:	d121      	bne.n	800076e <HAL_RCC_OscConfig+0x14e>
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	03d8      	lsls	r0, r3, #15
 800072e:	d41e      	bmi.n	800076e <HAL_RCC_OscConfig+0x14e>
 8000730:	2302      	movs	r3, #2
 8000732:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000736:	6822      	ldr	r2, [r4, #0]
 8000738:	fa93 f3a3 	rbit	r3, r3
 800073c:	fab3 f383 	clz	r3, r3
 8000740:	f003 031f 	and.w	r3, r3, #31
 8000744:	fa22 f303 	lsr.w	r3, r2, r3
 8000748:	07d9      	lsls	r1, r3, #31
 800074a:	d502      	bpl.n	8000752 <HAL_RCC_OscConfig+0x132>
 800074c:	692b      	ldr	r3, [r5, #16]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d190      	bne.n	8000674 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	22f8      	movs	r2, #248	; 0xf8
 8000756:	fa92 f2a2 	rbit	r2, r2
 800075a:	6969      	ldr	r1, [r5, #20]
 800075c:	fab2 f282 	clz	r2, r2
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000768:	4313      	orrs	r3, r2
 800076a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800076c:	e053      	b.n	8000816 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800076e:	692a      	ldr	r2, [r5, #16]
 8000770:	2301      	movs	r3, #1
 8000772:	b37a      	cbz	r2, 80007d4 <HAL_RCC_OscConfig+0x1b4>
 8000774:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000778:	fab2 f282 	clz	r2, r2
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000782:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000786:	2602      	movs	r6, #2
 8000788:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800078a:	f7ff fdc9 	bl	8000320 <HAL_GetTick>
 800078e:	4607      	mov	r7, r0
 8000790:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000794:	485b      	ldr	r0, [pc, #364]	; (8000904 <HAL_RCC_OscConfig+0x2e4>)
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	fa96 f3a6 	rbit	r3, r6
 800079c:	fab3 f383 	clz	r3, r3
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	fa22 f303 	lsr.w	r3, r2, r3
 80007a8:	07da      	lsls	r2, r3, #31
 80007aa:	d405      	bmi.n	80007b8 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007ac:	f7ff fdb8 	bl	8000320 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9ec      	bls.n	8000790 <HAL_RCC_OscConfig+0x170>
 80007b6:	e794      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007b8:	6803      	ldr	r3, [r0, #0]
 80007ba:	22f8      	movs	r2, #248	; 0xf8
 80007bc:	fa92 f2a2 	rbit	r2, r2
 80007c0:	6969      	ldr	r1, [r5, #20]
 80007c2:	fab2 f282 	clz	r2, r2
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007ce:	4313      	orrs	r3, r2
 80007d0:	6003      	str	r3, [r0, #0]
 80007d2:	e020      	b.n	8000816 <HAL_RCC_OscConfig+0x1f6>
 80007d4:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80007e2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80007e6:	2602      	movs	r6, #2
 80007e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ea:	f7ff fd99 	bl	8000320 <HAL_GetTick>
 80007ee:	4607      	mov	r7, r0
 80007f0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007f4:	6822      	ldr	r2, [r4, #0]
 80007f6:	fa96 f3a6 	rbit	r3, r6
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	fa22 f303 	lsr.w	r3, r2, r3
 8000806:	07db      	lsls	r3, r3, #31
 8000808:	d505      	bpl.n	8000816 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800080a:	f7ff fd89 	bl	8000320 <HAL_GetTick>
 800080e:	1bc0      	subs	r0, r0, r7
 8000810:	2802      	cmp	r0, #2
 8000812:	d9ed      	bls.n	80007f0 <HAL_RCC_OscConfig+0x1d0>
 8000814:	e765      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	0718      	lsls	r0, r3, #28
 800081a:	d403      	bmi.n	8000824 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800081c:	682b      	ldr	r3, [r5, #0]
 800081e:	0759      	lsls	r1, r3, #29
 8000820:	d447      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x292>
 8000822:	e0da      	b.n	80009da <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000824:	69aa      	ldr	r2, [r5, #24]
 8000826:	4c37      	ldr	r4, [pc, #220]	; (8000904 <HAL_RCC_OscConfig+0x2e4>)
 8000828:	4937      	ldr	r1, [pc, #220]	; (8000908 <HAL_RCC_OscConfig+0x2e8>)
 800082a:	2301      	movs	r3, #1
 800082c:	b302      	cbz	r2, 8000870 <HAL_RCC_OscConfig+0x250>
 800082e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000832:	fab2 f282 	clz	r2, r2
 8000836:	2602      	movs	r6, #2
 8000838:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800083c:	f7ff fd70 	bl	8000320 <HAL_GetTick>
 8000840:	4607      	mov	r7, r0
 8000842:	fa96 f3a6 	rbit	r3, r6
 8000846:	fa96 f3a6 	rbit	r3, r6
 800084a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800084e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000850:	fa96 f3a6 	rbit	r3, r6
 8000854:	fab3 f383 	clz	r3, r3
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	fa22 f303 	lsr.w	r3, r2, r3
 8000860:	07da      	lsls	r2, r3, #31
 8000862:	d4db      	bmi.n	800081c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000864:	f7ff fd5c 	bl	8000320 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2802      	cmp	r0, #2
 800086c:	d9e9      	bls.n	8000842 <HAL_RCC_OscConfig+0x222>
 800086e:	e738      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
 8000870:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000874:	fab3 f383 	clz	r3, r3
 8000878:	2602      	movs	r6, #2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800087e:	f7ff fd4f 	bl	8000320 <HAL_GetTick>
 8000882:	4607      	mov	r7, r0
 8000884:	fa96 f3a6 	rbit	r3, r6
 8000888:	fa96 f3a6 	rbit	r3, r6
 800088c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000890:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000892:	fa96 f3a6 	rbit	r3, r6
 8000896:	fab3 f383 	clz	r3, r3
 800089a:	f003 031f 	and.w	r3, r3, #31
 800089e:	fa22 f303 	lsr.w	r3, r2, r3
 80008a2:	07db      	lsls	r3, r3, #31
 80008a4:	d5ba      	bpl.n	800081c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008a6:	f7ff fd3b 	bl	8000320 <HAL_GetTick>
 80008aa:	1bc0      	subs	r0, r0, r7
 80008ac:	2802      	cmp	r0, #2
 80008ae:	d9e9      	bls.n	8000884 <HAL_RCC_OscConfig+0x264>
 80008b0:	e717      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008b2:	4c14      	ldr	r4, [pc, #80]	; (8000904 <HAL_RCC_OscConfig+0x2e4>)
 80008b4:	69e3      	ldr	r3, [r4, #28]
 80008b6:	00de      	lsls	r6, r3, #3
 80008b8:	d40a      	bmi.n	80008d0 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	69e3      	ldr	r3, [r4, #28]
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61e3      	str	r3, [r4, #28]
 80008c2:	69e3      	ldr	r3, [r4, #28]
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008cc:	2701      	movs	r7, #1
 80008ce:	e000      	b.n	80008d2 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80008d0:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008d2:	4e0e      	ldr	r6, [pc, #56]	; (800090c <HAL_RCC_OscConfig+0x2ec>)
 80008d4:	6833      	ldr	r3, [r6, #0]
 80008d6:	05d8      	lsls	r0, r3, #23
 80008d8:	d503      	bpl.n	80008e2 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008da:	68eb      	ldr	r3, [r5, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d117      	bne.n	8000910 <HAL_RCC_OscConfig+0x2f0>
 80008e0:	e02d      	b.n	800093e <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008e2:	6833      	ldr	r3, [r6, #0]
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80008ea:	f7ff fd19 	bl	8000320 <HAL_GetTick>
 80008ee:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008f0:	6833      	ldr	r3, [r6, #0]
 80008f2:	05d9      	lsls	r1, r3, #23
 80008f4:	d4f1      	bmi.n	80008da <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008f6:	f7ff fd13 	bl	8000320 <HAL_GetTick>
 80008fa:	ebc8 0000 	rsb	r0, r8, r0
 80008fe:	2864      	cmp	r0, #100	; 0x64
 8000900:	d9f6      	bls.n	80008f0 <HAL_RCC_OscConfig+0x2d0>
 8000902:	e6ee      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
 8000904:	40021000 	.word	0x40021000
 8000908:	42420480 	.word	0x42420480
 800090c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000910:	b97b      	cbnz	r3, 8000932 <HAL_RCC_OscConfig+0x312>
 8000912:	6a23      	ldr	r3, [r4, #32]
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	6223      	str	r3, [r4, #32]
 800091a:	6a23      	ldr	r3, [r4, #32]
 800091c:	f023 0304 	bic.w	r3, r3, #4
 8000920:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000922:	f7ff fcfd 	bl	8000320 <HAL_GetTick>
 8000926:	2602      	movs	r6, #2
 8000928:	4681      	mov	r9, r0
 800092a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800092c:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000930:	e039      	b.n	80009a6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000932:	2b05      	cmp	r3, #5
 8000934:	6a23      	ldr	r3, [r4, #32]
 8000936:	d106      	bne.n	8000946 <HAL_RCC_OscConfig+0x326>
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6223      	str	r3, [r4, #32]
 800093e:	6a23      	ldr	r3, [r4, #32]
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	e005      	b.n	8000952 <HAL_RCC_OscConfig+0x332>
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6223      	str	r3, [r4, #32]
 800094c:	6a23      	ldr	r3, [r4, #32]
 800094e:	f023 0304 	bic.w	r3, r3, #4
 8000952:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000954:	f7ff fce4 	bl	8000320 <HAL_GetTick>
 8000958:	2602      	movs	r6, #2
 800095a:	4682      	mov	sl, r0
 800095c:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800095e:	f241 3888 	movw	r8, #5000	; 0x1388
 8000962:	fa96 f3a6 	rbit	r3, r6
 8000966:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800096a:	b10b      	cbz	r3, 8000970 <HAL_RCC_OscConfig+0x350>
 800096c:	6a22      	ldr	r2, [r4, #32]
 800096e:	e002      	b.n	8000976 <HAL_RCC_OscConfig+0x356>
 8000970:	fa96 f3a6 	rbit	r3, r6
 8000974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000976:	fa99 f3a9 	rbit	r3, r9
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	07da      	lsls	r2, r3, #31
 8000988:	d41d      	bmi.n	80009c6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fcc9 	bl	8000320 <HAL_GetTick>
 800098e:	ebca 0000 	rsb	r0, sl, r0
 8000992:	4540      	cmp	r0, r8
 8000994:	d9e5      	bls.n	8000962 <HAL_RCC_OscConfig+0x342>
 8000996:	e6a4      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000998:	f7ff fcc2 	bl	8000320 <HAL_GetTick>
 800099c:	ebc9 0000 	rsb	r0, r9, r0
 80009a0:	4550      	cmp	r0, sl
 80009a2:	f63f ae9e 	bhi.w	80006e2 <HAL_RCC_OscConfig+0xc2>
 80009a6:	fa96 f3a6 	rbit	r3, r6
 80009aa:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ae:	b183      	cbz	r3, 80009d2 <HAL_RCC_OscConfig+0x3b2>
 80009b0:	6a22      	ldr	r2, [r4, #32]
 80009b2:	fa98 f3a8 	rbit	r3, r8
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	f003 031f 	and.w	r3, r3, #31
 80009be:	fa22 f303 	lsr.w	r3, r2, r3
 80009c2:	07db      	lsls	r3, r3, #31
 80009c4:	d4e8      	bmi.n	8000998 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009c6:	b147      	cbz	r7, 80009da <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009c8:	69e3      	ldr	r3, [r4, #28]
 80009ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ce:	61e3      	str	r3, [r4, #28]
 80009d0:	e003      	b.n	80009da <HAL_RCC_OscConfig+0x3ba>
 80009d2:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d8:	e7eb      	b.n	80009b2 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009da:	69ea      	ldr	r2, [r5, #28]
 80009dc:	b90a      	cbnz	r2, 80009e2 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009de:	2000      	movs	r0, #0
 80009e0:	e07e      	b.n	8000ae0 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009e2:	4c41      	ldr	r4, [pc, #260]	; (8000ae8 <HAL_RCC_OscConfig+0x4c8>)
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	f003 030c 	and.w	r3, r3, #12
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	f43f ae42 	beq.w	8000674 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009f0:	2a02      	cmp	r2, #2
 80009f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f6:	d150      	bne.n	8000a9a <HAL_RCC_OscConfig+0x47a>
 80009f8:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009fc:	fab3 f383 	clz	r3, r3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a06:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fc87 	bl	8000320 <HAL_GetTick>
 8000a12:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000a16:	4607      	mov	r7, r0
 8000a18:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a1c:	4932      	ldr	r1, [pc, #200]	; (8000ae8 <HAL_RCC_OscConfig+0x4c8>)
 8000a1e:	6822      	ldr	r2, [r4, #0]
 8000a20:	fa96 f3a6 	rbit	r3, r6
 8000a24:	fab3 f383 	clz	r3, r3
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a30:	07d8      	lsls	r0, r3, #31
 8000a32:	d505      	bpl.n	8000a40 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a34:	f7ff fc74 	bl	8000320 <HAL_GetTick>
 8000a38:	1bc0      	subs	r0, r0, r7
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9ec      	bls.n	8000a18 <HAL_RCC_OscConfig+0x3f8>
 8000a3e:	e650      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a40:	684b      	ldr	r3, [r1, #4]
 8000a42:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000a44:	6a2a      	ldr	r2, [r5, #32]
 8000a46:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a4a:	4302      	orrs	r2, r0
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
 8000a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a54:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a58:	fab3 f383 	clz	r3, r3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a62:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fc59 	bl	8000320 <HAL_GetTick>
 8000a6e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a72:	4606      	mov	r6, r0
 8000a74:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	fa95 f3a5 	rbit	r3, r5
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8a:	07da      	lsls	r2, r3, #31
 8000a8c:	d4a7      	bmi.n	80009de <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a8e:	f7ff fc47 	bl	8000320 <HAL_GetTick>
 8000a92:	1b80      	subs	r0, r0, r6
 8000a94:	2802      	cmp	r0, #2
 8000a96:	d9ed      	bls.n	8000a74 <HAL_RCC_OscConfig+0x454>
 8000a98:	e623      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
 8000a9a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000aa8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fc36 	bl	8000320 <HAL_GetTick>
 8000ab4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ab8:	4606      	mov	r6, r0
 8000aba:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000abe:	6822      	ldr	r2, [r4, #0]
 8000ac0:	fa95 f3a5 	rbit	r3, r5
 8000ac4:	fab3 f383 	clz	r3, r3
 8000ac8:	f003 031f 	and.w	r3, r3, #31
 8000acc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad0:	07db      	lsls	r3, r3, #31
 8000ad2:	d584      	bpl.n	80009de <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad4:	f7ff fc24 	bl	8000320 <HAL_GetTick>
 8000ad8:	1b80      	subs	r0, r0, r6
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9ed      	bls.n	8000aba <HAL_RCC_OscConfig+0x49a>
 8000ade:	e600      	b.n	80006e2 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000ae0:	b002      	add	sp, #8
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000aee:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000af0:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000af2:	f004 030c 	and.w	r3, r4, #12
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d11e      	bne.n	8000b38 <HAL_RCC_GetSysClockFreq+0x4c>
 8000afa:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000afe:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b02:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000b06:	fab3 f383 	clz	r3, r3
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b10:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000b14:	210f      	movs	r1, #15
 8000b16:	fa91 f1a1 	rbit	r1, r1
 8000b1a:	fab1 f181 	clz	r1, r1
 8000b1e:	f002 020f 	and.w	r2, r2, #15
 8000b22:	40ca      	lsrs	r2, r1
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b26:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b28:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000b2a:	bf52      	itee	pl
 8000b2c:	4806      	ldrpl	r0, [pc, #24]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b2e:	4a07      	ldrmi	r2, [pc, #28]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x60>)
 8000b30:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000b34:	4358      	muls	r0, r3
 8000b36:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b3a:	bd10      	pop	{r4, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	08001dc0 	.word	0x08001dc0
 8000b44:	08001db0 	.word	0x08001db0
 8000b48:	003d0900 	.word	0x003d0900
 8000b4c:	007a1200 	.word	0x007a1200

08000b50 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b50:	4a54      	ldr	r2, [pc, #336]	; (8000ca4 <HAL_RCC_ClockConfig+0x154>)
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5e:	4606      	mov	r6, r0
 8000b60:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b62:	d30a      	bcc.n	8000b7a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b64:	6831      	ldr	r1, [r6, #0]
 8000b66:	078c      	lsls	r4, r1, #30
 8000b68:	d514      	bpl.n	8000b94 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b6a:	484f      	ldr	r0, [pc, #316]	; (8000ca8 <HAL_RCC_ClockConfig+0x158>)
 8000b6c:	6843      	ldr	r3, [r0, #4]
 8000b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b72:	68b3      	ldr	r3, [r6, #8]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	6043      	str	r3, [r0, #4]
 8000b78:	e00c      	b.n	8000b94 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f023 0307 	bic.w	r3, r3, #7
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d0ea      	beq.n	8000b64 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b94:	07c8      	lsls	r0, r1, #31
 8000b96:	d406      	bmi.n	8000ba6 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b98:	4a42      	ldr	r2, [pc, #264]	; (8000ca4 <HAL_RCC_ClockConfig+0x154>)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	429d      	cmp	r5, r3
 8000ba2:	d34a      	bcc.n	8000c3a <HAL_RCC_ClockConfig+0xea>
 8000ba4:	e053      	b.n	8000c4e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba6:	6872      	ldr	r2, [r6, #4]
 8000ba8:	4c3f      	ldr	r4, [pc, #252]	; (8000ca8 <HAL_RCC_ClockConfig+0x158>)
 8000baa:	2a01      	cmp	r2, #1
 8000bac:	d102      	bne.n	8000bb4 <HAL_RCC_ClockConfig+0x64>
 8000bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb2:	e004      	b.n	8000bbe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb4:	2a02      	cmp	r2, #2
 8000bb6:	bf0c      	ite	eq
 8000bb8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bbc:	2302      	movne	r3, #2
 8000bbe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc2:	6821      	ldr	r1, [r4, #0]
 8000bc4:	fa93 f3a3 	rbit	r3, r3
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000bd4:	07d9      	lsls	r1, r3, #31
 8000bd6:	d5da      	bpl.n	8000b8e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	f023 0303 	bic.w	r3, r3, #3
 8000bde:	431a      	orrs	r2, r3
 8000be0:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000be2:	f7ff fb9d 	bl	8000320 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be6:	6873      	ldr	r3, [r6, #4]
 8000be8:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000bea:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d0cd      	beq.n	8000b98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfc:	f7ff fb90 	bl	8000320 <HAL_GetTick>
 8000c00:	1bc0      	subs	r0, r0, r7
 8000c02:	4540      	cmp	r0, r8
 8000c04:	d9f5      	bls.n	8000bf2 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000c06:	2003      	movs	r0, #3
 8000c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d10f      	bne.n	8000c30 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d0be      	beq.n	8000b98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1a:	f7ff fb81 	bl	8000320 <HAL_GetTick>
 8000c1e:	1bc0      	subs	r0, r0, r7
 8000c20:	4540      	cmp	r0, r8
 8000c22:	d9f5      	bls.n	8000c10 <HAL_RCC_ClockConfig+0xc0>
 8000c24:	e7ef      	b.n	8000c06 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c26:	f7ff fb7b 	bl	8000320 <HAL_GetTick>
 8000c2a:	1bc0      	subs	r0, r0, r7
 8000c2c:	4540      	cmp	r0, r8
 8000c2e:	d8ea      	bhi.n	8000c06 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	f013 0f0c 	tst.w	r3, #12
 8000c36:	d1f6      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xd6>
 8000c38:	e7ae      	b.n	8000b98 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	f023 0307 	bic.w	r3, r3, #7
 8000c40:	432b      	orrs	r3, r5
 8000c42:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c44:	6813      	ldr	r3, [r2, #0]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	429d      	cmp	r5, r3
 8000c4c:	d19f      	bne.n	8000b8e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c4e:	6831      	ldr	r1, [r6, #0]
 8000c50:	4c15      	ldr	r4, [pc, #84]	; (8000ca8 <HAL_RCC_ClockConfig+0x158>)
 8000c52:	f011 0f04 	tst.w	r1, #4
 8000c56:	d005      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c5e:	68f3      	ldr	r3, [r6, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c64:	070b      	lsls	r3, r1, #28
 8000c66:	d506      	bpl.n	8000c76 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	6932      	ldr	r2, [r6, #16]
 8000c6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c74:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c76:	f7ff ff39 	bl	8000aec <HAL_RCC_GetSysClockFreq>
 8000c7a:	6863      	ldr	r3, [r4, #4]
 8000c7c:	22f0      	movs	r2, #240	; 0xf0
 8000c7e:	fa92 f2a2 	rbit	r2, r2
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_RCC_ClockConfig+0x15c>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	40d8      	lsrs	r0, r3
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_RCC_ClockConfig+0x160>)
 8000c94:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fb14 	bl	80002c4 <HAL_InitTick>
  
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
}
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	08001de7 	.word	0x08001de7
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000000 	.word	0x20000000

08000cc0 <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f7ff bc8b 	b.w	80005dc <HAL_GPIO_WritePin>

08000cc6 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff bc88 	b.w	80005dc <HAL_GPIO_WritePin>

08000ccc <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
	if (data & 0x10) {
 8000cd0:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000cd2:	f04f 0110 	mov.w	r1, #16
 8000cd6:	481a      	ldr	r0, [pc, #104]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8000cd8:	d502      	bpl.n	8000ce0 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000cda:	f7ff fff1 	bl	8000cc0 <GPIO_SetBits>
 8000cde:	e001      	b.n	8000ce4 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000ce0:	f7ff fff1 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000ce4:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000ce6:	f04f 0120 	mov.w	r1, #32
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8000cec:	d502      	bpl.n	8000cf4 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000cee:	f7ff ffe7 	bl	8000cc0 <GPIO_SetBits>
 8000cf2:	e001      	b.n	8000cf8 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000cf4:	f7ff ffe7 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8000cf8:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000cfa:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000cfe:	4810      	ldr	r0, [pc, #64]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8000d00:	d502      	bpl.n	8000d08 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000d02:	f7ff ffdd 	bl	8000cc0 <GPIO_SetBits>
 8000d06:	e001      	b.n	8000d0c <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000d08:	f7ff ffdd 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8000d0c:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8000d14:	d502      	bpl.n	8000d1c <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d16:	f7ff ffd3 	bl	8000cc0 <GPIO_SetBits>
 8000d1a:	e001      	b.n	8000d20 <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d1c:	f7ff ffd3 	bl	8000cc6 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
 8000d26:	f7ff fc59 	bl	80005dc <HAL_GPIO_WritePin>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f7ff fafe 	bl	800032c <HAL_Delay>
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000d30:	2200      	movs	r2, #0
 8000d32:	2104      	movs	r1, #4
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <hd44780_wr_hi_nibble+0x74>)
}
 8000d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000d3a:	f7ff bc4f 	b.w	80005dc <HAL_GPIO_WritePin>
 8000d3e:	bf00      	nop
 8000d40:	48000c00 	.word	0x48000c00

08000d44 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8000d44:	b510      	push	{r4, lr}
 8000d46:	4604      	mov	r4, r0
	if (data & 0x01) {
 8000d48:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000d4a:	f04f 0110 	mov.w	r1, #16
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 8000d50:	d502      	bpl.n	8000d58 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000d52:	f7ff ffb5 	bl	8000cc0 <GPIO_SetBits>
 8000d56:	e001      	b.n	8000d5c <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000d58:	f7ff ffb5 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8000d5c:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000d5e:	f04f 0120 	mov.w	r1, #32
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 8000d64:	d502      	bpl.n	8000d6c <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000d66:	f7ff ffab 	bl	8000cc0 <GPIO_SetBits>
 8000d6a:	e001      	b.n	8000d70 <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000d6c:	f7ff ffab 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8000d70:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000d72:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 8000d78:	d502      	bpl.n	8000d80 <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000d7a:	f7ff ffa1 	bl	8000cc0 <GPIO_SetBits>
 8000d7e:	e001      	b.n	8000d84 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000d80:	f7ff ffa1 	bl	8000cc6 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8000d84:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d86:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 8000d8c:	d502      	bpl.n	8000d94 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d8e:	f7ff ff97 	bl	8000cc0 <GPIO_SetBits>
 8000d92:	e001      	b.n	8000d98 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000d94:	f7ff ff97 	bl	8000cc6 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
 8000d9e:	f7ff fc1d 	bl	80005dc <HAL_GPIO_WritePin>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8000da2:	200a      	movs	r0, #10
 8000da4:	f7ff fac2 	bl	800032c <HAL_Delay>
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000da8:	2200      	movs	r2, #0
 8000daa:	2104      	movs	r1, #4
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <hd44780_wr_lo_nibble+0x74>)
}
 8000dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000db2:	f7ff bc13 	b.w	80005dc <HAL_GPIO_WritePin>
 8000db6:	bf00      	nop
 8000db8:	48000c00 	.word	0x48000c00

08000dbc <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8000dc0:	f7ff ff84 	bl	8000ccc <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8000dc4:	4620      	mov	r0, r4
}
 8000dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 8000dca:	f7ff bfbb 	b.w	8000d44 <hd44780_wr_lo_nibble>
	...

08000dd0 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8000dd0:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8000dd2:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8000dd4:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <hd44780_wr_cmd+0x18>)
 8000dda:	f7ff fbff 	bl	80005dc <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8000dde:	4620      	mov	r0, r4
}
 8000de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 8000de4:	f7ff bfea 	b.w	8000dbc <hd44780_write>
 8000de8:	48000c00 	.word	0x48000c00

08000dec <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8000dec:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8000dee:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 8000df0:	4604      	mov	r4, r0
	hd44780_RS_On();
 8000df2:	4611      	mov	r1, r2
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <hd44780_wr_data+0x18>)
 8000df6:	f7ff fbf1 	bl	80005dc <HAL_GPIO_WritePin>
	hd44780_write(data);
 8000dfa:	4620      	mov	r0, r4
}
 8000dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 8000e00:	f7ff bfdc 	b.w	8000dbc <hd44780_write>
 8000e04:	48000c00 	.word	0x48000c00

08000e08 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8000e0a:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8000e0c:	695a      	ldr	r2, [r3, #20]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000e0e:	4d29      	ldr	r5, [pc, #164]	; (8000eb4 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8000e10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	695b      	ldr	r3, [r3, #20]
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8000e18:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8000e22:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8000e26:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000e28:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000e2a:	a901      	add	r1, sp, #4
 8000e2c:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8000e2e:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000e30:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000e32:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000e34:	f7ff fb02 	bl	800043c <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8000e38:	2307      	movs	r3, #7
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8000e3a:	a901      	add	r1, sp, #4
 8000e3c:	4628      	mov	r0, r5
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8000e3e:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000e42:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000e44:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8000e46:	f7ff faf9 	bl	800043c <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	f7ff fbc4 	bl	80005dc <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8000e54:	4621      	mov	r1, r4
 8000e56:	4628      	mov	r0, r5
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f7ff fbbf 	bl	80005dc <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	4628      	mov	r0, r5
 8000e64:	f7ff fbba 	bl	80005dc <HAL_GPIO_WritePin>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f7ff fa5f 	bl	800032c <HAL_Delay>
	hd44780_RW_Off();

	/* wait initial delay for LCD to settle */
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8000e6e:	2030      	movs	r0, #48	; 0x30
 8000e70:	f7ff ff2c 	bl	8000ccc <hd44780_wr_hi_nibble>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff fa59 	bl	800032c <HAL_Delay>
	/* wait initial delay for LCD to settle */
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
	hd44780_init_delay2();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8000e7a:	2030      	movs	r0, #48	; 0x30
 8000e7c:	f7ff ff26 	bl	8000ccc <hd44780_wr_hi_nibble>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8000e80:	200a      	movs	r0, #10
 8000e82:	f7ff fa53 	bl	800032c <HAL_Delay>
	hd44780_init_delay();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
	hd44780_init_delay2();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
	hd44780_init_delay3();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8000e86:	2030      	movs	r0, #48	; 0x30
 8000e88:	f7ff ff20 	bl	8000ccc <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	f7ff ff1d 	bl	8000ccc <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f7ff ff9c 	bl	8000dd0 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8000e98:	200c      	movs	r0, #12
 8000e9a:	f7ff ff99 	bl	8000dd0 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff ff96 	bl	8000dd0 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8000ea4:	2006      	movs	r0, #6
 8000ea6:	f7ff ff93 	bl	8000dd0 <hd44780_wr_cmd>

}
 8000eaa:	b006      	add	sp, #24
 8000eac:	bd70      	pop	{r4, r5, r6, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000c00 	.word	0x48000c00

08000eb8 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 8000eb8:	2901      	cmp	r1, #1
 8000eba:	bf88      	it	hi
 8000ebc:	2100      	movhi	r1, #0
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HD44780_GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8000ec0:	5c5b      	ldrb	r3, [r3, r1]
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;
 8000ec2:	280f      	cmp	r0, #15
 8000ec4:	bf88      	it	hi
 8000ec6:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8000ec8:	4418      	add	r0, r3
 8000eca:	b2c0      	uxtb	r0, r0
 8000ecc:	f7ff bf80 	b.w	8000dd0 <hd44780_wr_cmd>
 8000ed0:	08001dd0 	.word	0x08001dd0

08000ed4 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8000ed4:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8000ed6:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8000ed8:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8000eda:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8000edc:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 8000ede:	5ce0      	ldrb	r0, [r4, r3]
 8000ee0:	f7ff ff84 	bl	8000dec <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8000ee4:	9b01      	ldr	r3, [sp, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	5ce3      	ldrb	r3, [r4, r3]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f4      	bne.n	8000edc <HD44780_PutStr+0x8>
}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd10      	pop	{r4, pc}

08000ef6 <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff bf6a 	b.w	8000dd0 <hd44780_wr_cmd>

08000efc <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <DWT_Delay_Init+0x38>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000f04:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <DWT_Delay_Init+0x3c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f24:	bf00      	nop
     __ASM volatile ("NOP");
 8000f26:	bf00      	nop
  __ASM volatile ("NOP");
 8000f28:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f2a:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8000f2c:	fab0 f080 	clz	r0, r0
 8000f30:	0940      	lsrs	r0, r0, #5
 8000f32:	4770      	bx	lr
 8000f34:	e000edf0 	.word	0xe000edf0
 8000f38:	e0001000 	.word	0xe0001000

08000f3c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f3e:	4c09      	ldr	r4, [pc, #36]	; (8000f64 <DWT_Delay_us+0x28>)
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f40:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f42:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f44:	f7ff feb6 	bl	8000cb4 <HAL_RCC_GetHCLKFreq>
 8000f48:	9b01      	ldr	r3, [sp, #4]
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <DWT_Delay_us+0x2c>)
 8000f4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f50:	4343      	muls	r3, r0
 8000f52:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	9a01      	ldr	r2, [sp, #4]
 8000f58:	1b5b      	subs	r3, r3, r5
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d3fa      	bcc.n	8000f54 <DWT_Delay_us+0x18>
}
 8000f5e:	b003      	add	sp, #12
 8000f60:	bd30      	pop	{r4, r5, pc}
 8000f62:	bf00      	nop
 8000f64:	e0001000 	.word	0xe0001000
 8000f68:	000f4240 	.word	0x000f4240

08000f6c <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f74:	2310      	movs	r3, #16
 8000f76:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f88:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f7ff fb49 	bl	8000620 <HAL_RCC_OscConfig>
 8000f8e:	4601      	mov	r1, r0
 8000f90:	b100      	cbz	r0, 8000f94 <SystemClock_Config+0x28>
 8000f92:	e7fe      	b.n	8000f92 <SystemClock_Config+0x26>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa0:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa6:	f7ff fdd3 	bl	8000b50 <HAL_RCC_ClockConfig>
 8000faa:	4604      	mov	r4, r0
 8000fac:	b100      	cbz	r0, 8000fb0 <SystemClock_Config+0x44>
 8000fae:	e7fe      	b.n	8000fae <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fb0:	f7ff fe80 	bl	8000cb4 <HAL_RCC_GetHCLKFreq>
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fbc:	f7ff fa16 	bl	80003ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fc0:	2004      	movs	r0, #4
 8000fc2:	f7ff fa29 	bl	8000418 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	f7ff f9cd 	bl	800036c <HAL_NVIC_SetPriority>
}
 8000fd2:	b010      	add	sp, #64	; 0x40
 8000fd4:	bd10      	pop	{r4, pc}
	...

08000fd8 <main>:
 // HAL_NVIC_EnableIRQ( EXTI15_10_IRQn);

}

int main(void)
{
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
	char buffer2[10];
	char buffer3[10];



	  HAL_Init();
 8000fdc:	f7ff f986 	bl	80002ec <HAL_Init>
	  SystemClock_Config();
 8000fe0:	f7ff ffc4 	bl	8000f6c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4ba7      	ldr	r3, [pc, #668]	; (8001284 <main+0x2ac>)
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ff4:	9200      	str	r2, [sp, #0]
 8000ff6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff8:	695a      	ldr	r2, [r3, #20]
 8000ffa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	9b01      	ldr	r3, [sp, #4]


  /*Configure GPIO pin : PA0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001010:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <main+0x2b0>)
 8001012:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	a90b      	add	r1, sp, #44	; 0x2c

  /*Configure GPIO pin : PA0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001016:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PA0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f7ff fa0d 	bl	800043c <HAL_GPIO_Init>




  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001022:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2400      	movs	r4, #0




  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001028:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102a:	a90b      	add	r1, sp, #44	; 0x2c



  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	4897      	ldr	r0, [pc, #604]	; (800128c <main+0x2b4>)



  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001036:	f7ff fa01 	bl	800043c <HAL_GPIO_Init>
 */

static void MX_NVIC_Init(void)
{
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800103a:	4622      	mov	r2, r4
 800103c:	4621      	mov	r1, r4
 800103e:	2006      	movs	r0, #6
 8001040:	f7ff f994 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001044:	2006      	movs	r0, #6
 8001046:	f7ff f9c5 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800104a:	4622      	mov	r2, r4
 800104c:	4621      	mov	r1, r4
 800104e:	2007      	movs	r0, #7
 8001050:	f7ff f98c 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001054:	2007      	movs	r0, #7
 8001056:	f7ff f9bd 	bl	80003d4 <HAL_NVIC_EnableIRQ>
 // HAL_NVIC_SetPriority( EXTI2_TSC_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ( EXTI2_TSC_IRQn);
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800105a:	4622      	mov	r2, r4
 800105c:	4621      	mov	r1, r4
 800105e:	2009      	movs	r0, #9
 8001060:	f7ff f984 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001064:	2009      	movs	r0, #9
 8001066:	f7ff f9b5 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800106a:	4622      	mov	r2, r4
 800106c:	4621      	mov	r1, r4
 800106e:	200a      	movs	r0, #10
 8001070:	f7ff f97c 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff f9ad 	bl	80003d4 <HAL_NVIC_EnableIRQ>

	  HAL_Init();
	  SystemClock_Config();
	  MX_GPIO_Init();
	  MX_NVIC_Init();
	  HD44780_Init();
 800107a:	f7ff fec5 	bl	8000e08 <HD44780_Init>

	  if(DWT_Delay_Init())
 800107e:	f7ff ff3d 	bl	8000efc <DWT_Delay_Init>
 8001082:	b908      	cbnz	r0, 8001088 <main+0xb0>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);

HAL_Delay(2000);

timer =   (34000* timer) ;
timer = (timer/72000000);			//calculate the distance
 8001084:	4e82      	ldr	r6, [pc, #520]	; (8001290 <main+0x2b8>)
 8001086:	e0e8      	b.n	800125a <main+0x282>
 8001088:	e7fe      	b.n	8001088 <main+0xb0>
      Error_Handler(); /* Call Error Handler */
    }

//send the trigger signal to sensor1

HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 800108a:	4602      	mov	r2, r0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	487e      	ldr	r0, [pc, #504]	; (800128c <main+0x2b4>)
 8001092:	f7ff faa3 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ff50 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	487a      	ldr	r0, [pc, #488]	; (800128c <main+0x2b4>)
 80010a4:	f7ff fa9a 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f7ff ff47 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 80010ae:	4622      	mov	r2, r4
 80010b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b4:	4875      	ldr	r0, [pc, #468]	; (800128c <main+0x2b4>)
 80010b6:	f7ff fa91 	bl	80005dc <HAL_GPIO_WritePin>

HAL_Delay(2000);
 80010ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010be:	f7ff f935 	bl	800032c <HAL_Delay>

timer =   (34000* timer) ;
 80010c2:	4b74      	ldr	r3, [pc, #464]	; (8001294 <main+0x2bc>)
timer = (timer/72000000);			//calculate the distance
sprintf(buffer, "%d", timer);
 80010c4:	4974      	ldr	r1, [pc, #464]	; (8001298 <main+0x2c0>)
DWT_Delay_us(10);
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);

HAL_Delay(2000);

timer =   (34000* timer) ;
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f248 45d0 	movw	r5, #34000	; 0x84d0
 80010cc:	436a      	muls	r2, r5
 80010ce:	601a      	str	r2, [r3, #0]
timer = (timer/72000000);			//calculate the distance
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	fbb2 f2f6 	udiv	r2, r2, r6
 80010d6:	601a      	str	r2, [r3, #0]
sprintf(buffer, "%d", timer);
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	a802      	add	r0, sp, #8
 80010dc:	f000 fa2c 	bl	8001538 <siprintf>

HD44780_ClrScr();
 80010e0:	f7ff ff09 	bl	8000ef6 <HD44780_ClrScr>
HD44780_GotoXY(0, 0);				//set the character cursor to col=0, row=0
 80010e4:	4621      	mov	r1, r4
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fee6 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr(buffer);				//display text
 80010ec:	a802      	add	r0, sp, #8
 80010ee:	f7ff fef1 	bl	8000ed4 <HD44780_PutStr>
HD44780_GotoXY(3, 0);
 80010f2:	4621      	mov	r1, r4
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff fedf 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 80010fa:	4868      	ldr	r0, [pc, #416]	; (800129c <main+0x2c4>)
 80010fc:	f7ff feea 	bl	8000ed4 <HD44780_PutStr>

//send the trigger signal to sensor2
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 8001100:	4622      	mov	r2, r4
 8001102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001106:	4861      	ldr	r0, [pc, #388]	; (800128c <main+0x2b4>)
 8001108:	f7ff fa68 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff15 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	485c      	ldr	r0, [pc, #368]	; (800128c <main+0x2b4>)
 800111a:	f7ff fa5f 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f7ff ff0c 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 8001124:	4622      	mov	r2, r4
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	4858      	ldr	r0, [pc, #352]	; (800128c <main+0x2b4>)
 800112c:	f7ff fa56 	bl	80005dc <HAL_GPIO_WritePin>

HAL_Delay(2000);
 8001130:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001134:	f7ff f8fa 	bl	800032c <HAL_Delay>

timer1 =   (34000* timer1) ;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <main+0x2c8>)
timer1 = (timer1/72000000);
sprintf(buffer1, "%d", timer1);
 800113a:	4957      	ldr	r1, [pc, #348]	; (8001298 <main+0x2c0>)
DWT_Delay_us(10);
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);

HAL_Delay(2000);

timer1 =   (34000* timer1) ;
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	436a      	muls	r2, r5
 8001140:	601a      	str	r2, [r3, #0]
timer1 = (timer1/72000000);
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	fbb2 f2f6 	udiv	r2, r2, r6
 8001148:	601a      	str	r2, [r3, #0]
sprintf(buffer1, "%d", timer1);
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	a805      	add	r0, sp, #20
 800114e:	f000 f9f3 	bl	8001538 <siprintf>

HD44780_GotoXY(7, 0);				//set the character cursor to col=0, row=0
 8001152:	4621      	mov	r1, r4
 8001154:	2007      	movs	r0, #7
 8001156:	f7ff feaf 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr(buffer1);				//display text
 800115a:	a805      	add	r0, sp, #20
 800115c:	f7ff feba 	bl	8000ed4 <HD44780_PutStr>
HD44780_GotoXY(10, 0);
 8001160:	4621      	mov	r1, r4
 8001162:	200a      	movs	r0, #10
 8001164:	f7ff fea8 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 8001168:	484c      	ldr	r0, [pc, #304]	; (800129c <main+0x2c4>)
 800116a:	f7ff feb3 	bl	8000ed4 <HD44780_PutStr>
HAL_Delay(500);
 800116e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001172:	f7ff f8db 	bl	800032c <HAL_Delay>



//send the trigger signal to sensor3
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 8001176:	4622      	mov	r2, r4
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4843      	ldr	r0, [pc, #268]	; (800128c <main+0x2b4>)
 800117e:	f7ff fa2d 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff feda 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	483f      	ldr	r0, [pc, #252]	; (800128c <main+0x2b4>)
 8001190:	f7ff fa24 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f7ff fed1 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 800119a:	4622      	mov	r2, r4
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <main+0x2b4>)
 80011a2:	f7ff fa1b 	bl	80005dc <HAL_GPIO_WritePin>

HAL_Delay(2000);
 80011a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011aa:	f7ff f8bf 	bl	800032c <HAL_Delay>

timer2 =   (34000* timer2) ;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <main+0x2cc>)
timer2 = (timer2/72000000);			//calculate the distance
sprintf(buffer2, "%d", timer2);
 80011b0:	4939      	ldr	r1, [pc, #228]	; (8001298 <main+0x2c0>)
DWT_Delay_us(10);
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);

HAL_Delay(2000);

timer2 =   (34000* timer2) ;
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	436a      	muls	r2, r5
 80011b6:	601a      	str	r2, [r3, #0]
timer2 = (timer2/72000000);			//calculate the distance
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	fbb2 f2f6 	udiv	r2, r2, r6
 80011be:	601a      	str	r2, [r3, #0]
sprintf(buffer2, "%d", timer2);
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	a808      	add	r0, sp, #32
 80011c4:	f000 f9b8 	bl	8001538 <siprintf>

HD44780_GotoXY(0, 1);				//set the character cursor to col=0, row=0
 80011c8:	2101      	movs	r1, #1
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fe74 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr(buffer2);				//display text
 80011d0:	a808      	add	r0, sp, #32
 80011d2:	f7ff fe7f 	bl	8000ed4 <HD44780_PutStr>
HD44780_GotoXY(3, 1);
 80011d6:	2101      	movs	r1, #1
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff fe6d 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 80011de:	482f      	ldr	r0, [pc, #188]	; (800129c <main+0x2c4>)
 80011e0:	f7ff fe78 	bl	8000ed4 <HD44780_PutStr>

//send the trigger signal to sensor3
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 80011e4:	4622      	mov	r2, r4
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	4828      	ldr	r0, [pc, #160]	; (800128c <main+0x2b4>)
 80011ec:	f7ff f9f6 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fea3 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	4823      	ldr	r0, [pc, #140]	; (800128c <main+0x2b4>)
 80011fe:	f7ff f9ed 	bl	80005dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f7ff fe9a 	bl	8000f3c <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 8001208:	4622      	mov	r2, r4
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <main+0x2b4>)
 8001210:	f7ff f9e4 	bl	80005dc <HAL_GPIO_WritePin>

HAL_Delay(2000);
 8001214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001218:	f7ff f888 	bl	800032c <HAL_Delay>

timer3 =   (34000* timer3) ;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <main+0x2d0>)
timer3 = (timer3/72000000);
sprintf(buffer3, "%d", timer3);
 800121e:	491e      	ldr	r1, [pc, #120]	; (8001298 <main+0x2c0>)
DWT_Delay_us(10);
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);

HAL_Delay(2000);

timer3 =   (34000* timer3) ;
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4355      	muls	r5, r2
 8001224:	601d      	str	r5, [r3, #0]
timer3 = (timer3/72000000);
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	fbb2 f2f6 	udiv	r2, r2, r6
 800122c:	601a      	str	r2, [r3, #0]
sprintf(buffer3, "%d", timer3);
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	a80b      	add	r0, sp, #44	; 0x2c
 8001232:	f000 f981 	bl	8001538 <siprintf>

HD44780_GotoXY(7, 1);				//set the character cursor to col=0, row=0
 8001236:	2101      	movs	r1, #1
 8001238:	2007      	movs	r0, #7
 800123a:	f7ff fe3d 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr(buffer3);				//display text
 800123e:	a80b      	add	r0, sp, #44	; 0x2c
 8001240:	f7ff fe48 	bl	8000ed4 <HD44780_PutStr>
HD44780_GotoXY(10, 1);
 8001244:	2101      	movs	r1, #1
 8001246:	200a      	movs	r0, #10
 8001248:	f7ff fe36 	bl	8000eb8 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <main+0x2c4>)
 800124e:	f7ff fe41 	bl	8000ed4 <HD44780_PutStr>
HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f7ff f869 	bl	800032c <HAL_Delay>
	while(1)
	{



  HD44780_ClrScr();
 800125a:	f7ff fe4c 	bl	8000ef6 <HD44780_ClrScr>
  HD44780_GotoXY(0, 0);						//set the character cursor to col=0, row=0
 800125e:	2100      	movs	r1, #0
 8001260:	4608      	mov	r0, r1
 8001262:	f7ff fe29 	bl	8000eb8 <HD44780_GotoXY>
  HD44780_PutStr("measuring...");			//display text
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <main+0x2d4>)
 8001268:	f7ff fe34 	bl	8000ed4 <HD44780_PutStr>
  HAL_Delay(500);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f7ff f85c 	bl	800032c <HAL_Delay>


  if(DWT_Delay_Init())
 8001274:	f7ff fe42 	bl	8000efc <DWT_Delay_Init>
 8001278:	4604      	mov	r4, r0
 800127a:	2800      	cmp	r0, #0
 800127c:	f43f af05 	beq.w	800108a <main+0xb2>
 8001280:	e7fe      	b.n	8001280 <main+0x2a8>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	10310000 	.word	0x10310000
 800128c:	48001000 	.word	0x48001000
 8001290:	044aa200 	.word	0x044aa200
 8001294:	20000094 	.word	0x20000094
 8001298:	08001de1 	.word	0x08001de1
 800129c:	08001de4 	.word	0x08001de4
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	20000098 	.word	0x20000098
 80012a8:	200000a0 	.word	0x200000a0
 80012ac:	08001dd4 	.word	0x08001dd4

080012b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012c4:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012c8:	f7ff f83e 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4611      	mov	r1, r2
 80012d0:	f06f 000b 	mvn.w	r0, #11
 80012d4:	f7ff f84a 	bl	800036c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	4611      	mov	r1, r2
 80012dc:	f06f 000a 	mvn.w	r0, #10
 80012e0:	f7ff f844 	bl	800036c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	4611      	mov	r1, r2
 80012e8:	f06f 0009 	mvn.w	r0, #9
 80012ec:	f7ff f83e 	bl	800036c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	4611      	mov	r1, r2
 80012f4:	f06f 0004 	mvn.w	r0, #4
 80012f8:	f7ff f838 	bl	800036c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4611      	mov	r1, r2
 8001300:	f06f 0003 	mvn.w	r0, #3
 8001304:	f7ff f832 	bl	800036c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	4611      	mov	r1, r2
 800130c:	f06f 0001 	mvn.w	r0, #1
 8001310:	f7ff f82c 	bl	800036c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	4611      	mov	r1, r2
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff f826 	bl	800036c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	4611      	mov	r1, r2
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff f821 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff f852 	bl	80003d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	b003      	add	sp, #12
 8001332:	f85d fb04 	ldr.w	pc, [sp], #4
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <SVC_Handler>:
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001342:	f7fe ffe5 	bl	8000310 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800134a:	f7ff b872 	b.w	8000432 <HAL_SYSTICK_IRQHandler>

0800134e <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800134e:	f7ff b959 	b.w	8000604 <HAL_PWR_PVD_IRQHandler>
	...

08001354 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8001354:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff f946 	bl	80005e8 <HAL_GPIO_EXTI_IRQHandler>

  DWT->CYCCNT=0;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <EXTI0_IRQHandler+0x40>)
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 800135e:	4d0e      	ldr	r5, [pc, #56]	; (8001398 <EXTI0_IRQHandler+0x44>)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);

  DWT->CYCCNT=0;
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001364:	461c      	mov	r4, r3
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);

  DWT->CYCCNT=0;
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001366:	2101      	movs	r1, #1
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f7ff f930 	bl	80005d0 <HAL_GPIO_ReadPin>
 8001370:	4602      	mov	r2, r0
 8001372:	b140      	cbz	r0, 8001386 <EXTI0_IRQHandler+0x32>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <EXTI0_IRQHandler+0x48>)
 800137c:	f7ff f92e 	bl	80005dc <HAL_GPIO_WritePin>
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001380:	6863      	ldr	r3, [r4, #4]
 8001382:	602b      	str	r3, [r5, #0]
 8001384:	e7ef      	b.n	8001366 <EXTI0_IRQHandler+0x12>
	}
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 8001386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <EXTI0_IRQHandler+0x48>)
    /* USER CODE END EXTI0_IRQn 1 */
}
 800138c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
	}
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 8001390:	f7ff b924 	b.w	80005dc <HAL_GPIO_WritePin>
 8001394:	e0001000 	.word	0xe0001000
 8001398:	20000094 	.word	0x20000094
 800139c:	48001000 	.word	0x48001000

080013a0 <EXTI1_IRQHandler>:
    /* USER CODE END EXTI0_IRQn 1 */
}

void EXTI1_IRQHandler(void)
{
 80013a0:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7ff f920 	bl	80005e8 <HAL_GPIO_EXTI_IRQHandler>
  DWT->CYCCNT=0;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <EXTI1_IRQHandler+0x40>)
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
			timer1 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80013aa:	4d0e      	ldr	r5, [pc, #56]	; (80013e4 <EXTI1_IRQHandler+0x44>)
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  DWT->CYCCNT=0;
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
			timer1 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80013b0:	461c      	mov	r4, r3
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  DWT->CYCCNT=0;
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80013b2:	2102      	movs	r1, #2
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f7ff f90a 	bl	80005d0 <HAL_GPIO_ReadPin>
 80013bc:	4602      	mov	r2, r0
 80013be:	b140      	cbz	r0, 80013d2 <EXTI1_IRQHandler+0x32>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <EXTI1_IRQHandler+0x48>)
 80013c8:	f7ff f908 	bl	80005dc <HAL_GPIO_WritePin>
			timer1 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	e7ef      	b.n	80013b2 <EXTI1_IRQHandler+0x12>
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 80013d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <EXTI1_IRQHandler+0x48>)

}
 80013d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
			timer1 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 80013dc:	f7ff b8fe 	b.w	80005dc <HAL_GPIO_WritePin>
 80013e0:	e0001000 	.word	0xe0001000
 80013e4:	2000009c 	.word	0x2000009c
 80013e8:	48001000 	.word	0x48001000

080013ec <EXTI3_IRQHandler>:

}

void EXTI3_IRQHandler(void)
{
 80013ec:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80013ee:	2008      	movs	r0, #8
 80013f0:	f7ff f8fa 	bl	80005e8 <HAL_GPIO_EXTI_IRQHandler>
  DWT->CYCCNT=0;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <EXTI3_IRQHandler+0x40>)
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
			timer2 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80013f6:	4d0e      	ldr	r5, [pc, #56]	; (8001430 <EXTI3_IRQHandler+0x44>)
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
  DWT->CYCCNT=0;
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
			timer2 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80013fc:	461c      	mov	r4, r3
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
  DWT->CYCCNT=0;
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)){
 80013fe:	2108      	movs	r1, #8
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f7ff f8e4 	bl	80005d0 <HAL_GPIO_ReadPin>
 8001408:	4602      	mov	r2, r0
 800140a:	b140      	cbz	r0, 800141e <EXTI3_IRQHandler+0x32>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	4808      	ldr	r0, [pc, #32]	; (8001434 <EXTI3_IRQHandler+0x48>)
 8001414:	f7ff f8e2 	bl	80005dc <HAL_GPIO_WritePin>
			timer2 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001418:	6863      	ldr	r3, [r4, #4]
 800141a:	602b      	str	r3, [r5, #0]
 800141c:	e7ef      	b.n	80013fe <EXTI3_IRQHandler+0x12>
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 800141e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <EXTI3_IRQHandler+0x48>)

}
 8001424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
			timer2 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 8001428:	f7ff b8d8 	b.w	80005dc <HAL_GPIO_WritePin>
 800142c:	e0001000 	.word	0xe0001000
 8001430:	20000098 	.word	0x20000098
 8001434:	48001000 	.word	0x48001000

08001438 <EXTI4_IRQHandler>:

}


void EXTI4_IRQHandler(void)
{
 8001438:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800143a:	2010      	movs	r0, #16
 800143c:	f7ff f8d4 	bl	80005e8 <HAL_GPIO_EXTI_IRQHandler>
  DWT->CYCCNT=0;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <EXTI4_IRQHandler+0x40>)
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
			timer3 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001442:	4d0e      	ldr	r5, [pc, #56]	; (800147c <EXTI4_IRQHandler+0x44>)
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  DWT->CYCCNT=0;
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
			timer3 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001448:	461c      	mov	r4, r3
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  DWT->CYCCNT=0;
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)){
 800144a:	2110      	movs	r1, #16
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f7ff f8be 	bl	80005d0 <HAL_GPIO_ReadPin>
 8001454:	4602      	mov	r2, r0
 8001456:	b140      	cbz	r0, 800146a <EXTI4_IRQHandler+0x32>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <EXTI4_IRQHandler+0x48>)
 8001460:	f7ff f8bc 	bl	80005dc <HAL_GPIO_WritePin>
			timer3 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	e7ef      	b.n	800144a <EXTI4_IRQHandler+0x12>
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 800146a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <EXTI4_IRQHandler+0x48>)

}
 8001470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
			timer3 = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
			//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	}
    /* USER CODE END EXTI0_IRQn 1 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 8001474:	f7ff b8b2 	b.w	80005dc <HAL_GPIO_WritePin>
 8001478:	e0001000 	.word	0xe0001000
 800147c:	200000a0 	.word	0x200000a0
 8001480:	48001000 	.word	0x48001000

08001484 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4915      	ldr	r1, [pc, #84]	; (80014dc <SystemInit+0x58>)
 8001486:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800148a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <SystemInit+0x5c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800149c:	6858      	ldr	r0, [r3, #4]
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <SystemInit+0x60>)
 80014a0:	4002      	ands	r2, r0
 80014a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80014aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80014be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80014c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c2:	f022 020f 	bic.w	r2, r2, #15
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80014c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <SystemInit+0x64>)
 80014cc:	4002      	ands	r2, r0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014d8:	608b      	str	r3, [r1, #8]
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	f87fc00c 	.word	0xf87fc00c
 80014e8:	ff00fccc 	.word	0xff00fccc

080014ec <__libc_init_array>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <__libc_init_array+0x3c>)
 80014f0:	4c0e      	ldr	r4, [pc, #56]	; (800152c <__libc_init_array+0x40>)
 80014f2:	1ae4      	subs	r4, r4, r3
 80014f4:	10a4      	asrs	r4, r4, #2
 80014f6:	2500      	movs	r5, #0
 80014f8:	461e      	mov	r6, r3
 80014fa:	42a5      	cmp	r5, r4
 80014fc:	d004      	beq.n	8001508 <__libc_init_array+0x1c>
 80014fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001502:	4798      	blx	r3
 8001504:	3501      	adds	r5, #1
 8001506:	e7f8      	b.n	80014fa <__libc_init_array+0xe>
 8001508:	f000 fc46 	bl	8001d98 <_init>
 800150c:	4c08      	ldr	r4, [pc, #32]	; (8001530 <__libc_init_array+0x44>)
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <__libc_init_array+0x48>)
 8001510:	1ae4      	subs	r4, r4, r3
 8001512:	10a4      	asrs	r4, r4, #2
 8001514:	2500      	movs	r5, #0
 8001516:	461e      	mov	r6, r3
 8001518:	42a5      	cmp	r5, r4
 800151a:	d004      	beq.n	8001526 <__libc_init_array+0x3a>
 800151c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001520:	4798      	blx	r3
 8001522:	3501      	adds	r5, #1
 8001524:	e7f8      	b.n	8001518 <__libc_init_array+0x2c>
 8001526:	bd70      	pop	{r4, r5, r6, pc}
 8001528:	08001e2c 	.word	0x08001e2c
 800152c:	08001e2c 	.word	0x08001e2c
 8001530:	08001e30 	.word	0x08001e30
 8001534:	08001e2c 	.word	0x08001e2c

08001538 <siprintf>:
 8001538:	b40e      	push	{r1, r2, r3}
 800153a:	b500      	push	{lr}
 800153c:	b09c      	sub	sp, #112	; 0x70
 800153e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001542:	ab1d      	add	r3, sp, #116	; 0x74
 8001544:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001548:	9002      	str	r0, [sp, #8]
 800154a:	9006      	str	r0, [sp, #24]
 800154c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <siprintf+0x44>)
 8001552:	9104      	str	r1, [sp, #16]
 8001554:	9107      	str	r1, [sp, #28]
 8001556:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800155a:	f853 2b04 	ldr.w	r2, [r3], #4
 800155e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001562:	6800      	ldr	r0, [r0, #0]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	a902      	add	r1, sp, #8
 8001568:	f000 f864 	bl	8001634 <_svfiprintf_r>
 800156c:	9b02      	ldr	r3, [sp, #8]
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	b01c      	add	sp, #112	; 0x70
 8001574:	f85d eb04 	ldr.w	lr, [sp], #4
 8001578:	b003      	add	sp, #12
 800157a:	4770      	bx	lr
 800157c:	20000064 	.word	0x20000064

08001580 <__ssputs_r>:
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	688e      	ldr	r6, [r1, #8]
 8001586:	429e      	cmp	r6, r3
 8001588:	4682      	mov	sl, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4691      	mov	r9, r2
 800158e:	4698      	mov	r8, r3
 8001590:	d83e      	bhi.n	8001610 <__ssputs_r+0x90>
 8001592:	898a      	ldrh	r2, [r1, #12]
 8001594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001598:	d03a      	beq.n	8001610 <__ssputs_r+0x90>
 800159a:	6825      	ldr	r5, [r4, #0]
 800159c:	6909      	ldr	r1, [r1, #16]
 800159e:	1a6f      	subs	r7, r5, r1
 80015a0:	6965      	ldr	r5, [r4, #20]
 80015a2:	2302      	movs	r3, #2
 80015a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80015ac:	1c7b      	adds	r3, r7, #1
 80015ae:	4443      	add	r3, r8
 80015b0:	429d      	cmp	r5, r3
 80015b2:	bf38      	it	cc
 80015b4:	461d      	movcc	r5, r3
 80015b6:	0553      	lsls	r3, r2, #21
 80015b8:	d50f      	bpl.n	80015da <__ssputs_r+0x5a>
 80015ba:	4629      	mov	r1, r5
 80015bc:	f000 fb3e 	bl	8001c3c <_malloc_r>
 80015c0:	4606      	mov	r6, r0
 80015c2:	b198      	cbz	r0, 80015ec <__ssputs_r+0x6c>
 80015c4:	463a      	mov	r2, r7
 80015c6:	6921      	ldr	r1, [r4, #16]
 80015c8:	f000 fac4 	bl	8001b54 <memcpy>
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80015d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d6:	81a3      	strh	r3, [r4, #12]
 80015d8:	e013      	b.n	8001602 <__ssputs_r+0x82>
 80015da:	462a      	mov	r2, r5
 80015dc:	f000 fb8c 	bl	8001cf8 <_realloc_r>
 80015e0:	4606      	mov	r6, r0
 80015e2:	b970      	cbnz	r0, 8001602 <__ssputs_r+0x82>
 80015e4:	6921      	ldr	r1, [r4, #16]
 80015e6:	4650      	mov	r0, sl
 80015e8:	f000 fada 	bl	8001ba0 <_free_r>
 80015ec:	230c      	movs	r3, #12
 80015ee:	f8ca 3000 	str.w	r3, [sl]
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f8:	81a3      	strh	r3, [r4, #12]
 80015fa:	f04f 30ff 	mov.w	r0, #4294967295
 80015fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001602:	6126      	str	r6, [r4, #16]
 8001604:	6165      	str	r5, [r4, #20]
 8001606:	443e      	add	r6, r7
 8001608:	1bed      	subs	r5, r5, r7
 800160a:	6026      	str	r6, [r4, #0]
 800160c:	60a5      	str	r5, [r4, #8]
 800160e:	4646      	mov	r6, r8
 8001610:	4546      	cmp	r6, r8
 8001612:	bf28      	it	cs
 8001614:	4646      	movcs	r6, r8
 8001616:	4632      	mov	r2, r6
 8001618:	4649      	mov	r1, r9
 800161a:	6820      	ldr	r0, [r4, #0]
 800161c:	f000 faa5 	bl	8001b6a <memmove>
 8001620:	68a3      	ldr	r3, [r4, #8]
 8001622:	1b9b      	subs	r3, r3, r6
 8001624:	60a3      	str	r3, [r4, #8]
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	441e      	add	r6, r3
 800162a:	6026      	str	r6, [r4, #0]
 800162c:	2000      	movs	r0, #0
 800162e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001634 <_svfiprintf_r>:
 8001634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001638:	b09d      	sub	sp, #116	; 0x74
 800163a:	4680      	mov	r8, r0
 800163c:	9303      	str	r3, [sp, #12]
 800163e:	898b      	ldrh	r3, [r1, #12]
 8001640:	061c      	lsls	r4, r3, #24
 8001642:	460d      	mov	r5, r1
 8001644:	4616      	mov	r6, r2
 8001646:	d50d      	bpl.n	8001664 <_svfiprintf_r+0x30>
 8001648:	690b      	ldr	r3, [r1, #16]
 800164a:	b95b      	cbnz	r3, 8001664 <_svfiprintf_r+0x30>
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	f000 faf5 	bl	8001c3c <_malloc_r>
 8001652:	6028      	str	r0, [r5, #0]
 8001654:	6128      	str	r0, [r5, #16]
 8001656:	b918      	cbnz	r0, 8001660 <_svfiprintf_r+0x2c>
 8001658:	230c      	movs	r3, #12
 800165a:	f8c8 3000 	str.w	r3, [r8]
 800165e:	e0cd      	b.n	80017fc <_svfiprintf_r+0x1c8>
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	616b      	str	r3, [r5, #20]
 8001664:	2300      	movs	r3, #0
 8001666:	9309      	str	r3, [sp, #36]	; 0x24
 8001668:	2320      	movs	r3, #32
 800166a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800166e:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800180c <_svfiprintf_r+0x1d8>
 8001672:	2330      	movs	r3, #48	; 0x30
 8001674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001678:	4637      	mov	r7, r6
 800167a:	463c      	mov	r4, r7
 800167c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001680:	b91b      	cbnz	r3, 800168a <_svfiprintf_r+0x56>
 8001682:	ebb7 0906 	subs.w	r9, r7, r6
 8001686:	d010      	beq.n	80016aa <_svfiprintf_r+0x76>
 8001688:	e003      	b.n	8001692 <_svfiprintf_r+0x5e>
 800168a:	2b25      	cmp	r3, #37	; 0x25
 800168c:	d0f9      	beq.n	8001682 <_svfiprintf_r+0x4e>
 800168e:	4627      	mov	r7, r4
 8001690:	e7f3      	b.n	800167a <_svfiprintf_r+0x46>
 8001692:	464b      	mov	r3, r9
 8001694:	4632      	mov	r2, r6
 8001696:	4629      	mov	r1, r5
 8001698:	4640      	mov	r0, r8
 800169a:	f7ff ff71 	bl	8001580 <__ssputs_r>
 800169e:	3001      	adds	r0, #1
 80016a0:	f000 80a7 	beq.w	80017f2 <_svfiprintf_r+0x1be>
 80016a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016a6:	444b      	add	r3, r9
 80016a8:	9309      	str	r3, [sp, #36]	; 0x24
 80016aa:	783b      	ldrb	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a0 	beq.w	80017f2 <_svfiprintf_r+0x1be>
 80016b2:	2300      	movs	r3, #0
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	9304      	str	r3, [sp, #16]
 80016ba:	9307      	str	r3, [sp, #28]
 80016bc:	9205      	str	r2, [sp, #20]
 80016be:	9306      	str	r3, [sp, #24]
 80016c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016c4:	931a      	str	r3, [sp, #104]	; 0x68
 80016c6:	2601      	movs	r6, #1
 80016c8:	2205      	movs	r2, #5
 80016ca:	7821      	ldrb	r1, [r4, #0]
 80016cc:	484e      	ldr	r0, [pc, #312]	; (8001808 <_svfiprintf_r+0x1d4>)
 80016ce:	f7fe fd7f 	bl	80001d0 <memchr>
 80016d2:	1c67      	adds	r7, r4, #1
 80016d4:	9b04      	ldr	r3, [sp, #16]
 80016d6:	b138      	cbz	r0, 80016e8 <_svfiprintf_r+0xb4>
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <_svfiprintf_r+0x1d4>)
 80016da:	1a80      	subs	r0, r0, r2
 80016dc:	fa06 f000 	lsl.w	r0, r6, r0
 80016e0:	4318      	orrs	r0, r3
 80016e2:	9004      	str	r0, [sp, #16]
 80016e4:	463c      	mov	r4, r7
 80016e6:	e7ef      	b.n	80016c8 <_svfiprintf_r+0x94>
 80016e8:	06d9      	lsls	r1, r3, #27
 80016ea:	bf44      	itt	mi
 80016ec:	2220      	movmi	r2, #32
 80016ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80016f2:	071a      	lsls	r2, r3, #28
 80016f4:	bf44      	itt	mi
 80016f6:	222b      	movmi	r2, #43	; 0x2b
 80016f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80016fc:	7822      	ldrb	r2, [r4, #0]
 80016fe:	2a2a      	cmp	r2, #42	; 0x2a
 8001700:	d003      	beq.n	800170a <_svfiprintf_r+0xd6>
 8001702:	9a07      	ldr	r2, [sp, #28]
 8001704:	2100      	movs	r1, #0
 8001706:	200a      	movs	r0, #10
 8001708:	e00b      	b.n	8001722 <_svfiprintf_r+0xee>
 800170a:	9a03      	ldr	r2, [sp, #12]
 800170c:	1d11      	adds	r1, r2, #4
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	2a00      	cmp	r2, #0
 8001714:	da10      	bge.n	8001738 <_svfiprintf_r+0x104>
 8001716:	4252      	negs	r2, r2
 8001718:	f043 0002 	orr.w	r0, r3, #2
 800171c:	9207      	str	r2, [sp, #28]
 800171e:	9004      	str	r0, [sp, #16]
 8001720:	e00b      	b.n	800173a <_svfiprintf_r+0x106>
 8001722:	4627      	mov	r7, r4
 8001724:	3401      	adds	r4, #1
 8001726:	783b      	ldrb	r3, [r7, #0]
 8001728:	3b30      	subs	r3, #48	; 0x30
 800172a:	2b09      	cmp	r3, #9
 800172c:	d803      	bhi.n	8001736 <_svfiprintf_r+0x102>
 800172e:	fb00 3202 	mla	r2, r0, r2, r3
 8001732:	2101      	movs	r1, #1
 8001734:	e7f5      	b.n	8001722 <_svfiprintf_r+0xee>
 8001736:	b101      	cbz	r1, 800173a <_svfiprintf_r+0x106>
 8001738:	9207      	str	r2, [sp, #28]
 800173a:	783b      	ldrb	r3, [r7, #0]
 800173c:	2b2e      	cmp	r3, #46	; 0x2e
 800173e:	d11e      	bne.n	800177e <_svfiprintf_r+0x14a>
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b2a      	cmp	r3, #42	; 0x2a
 8001744:	d10a      	bne.n	800175c <_svfiprintf_r+0x128>
 8001746:	9b03      	ldr	r3, [sp, #12]
 8001748:	1d1a      	adds	r2, r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	9203      	str	r2, [sp, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bfb8      	it	lt
 8001752:	f04f 33ff 	movlt.w	r3, #4294967295
 8001756:	3702      	adds	r7, #2
 8001758:	9305      	str	r3, [sp, #20]
 800175a:	e010      	b.n	800177e <_svfiprintf_r+0x14a>
 800175c:	2300      	movs	r3, #0
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	1c78      	adds	r0, r7, #1
 8001762:	4619      	mov	r1, r3
 8001764:	240a      	movs	r4, #10
 8001766:	4607      	mov	r7, r0
 8001768:	3001      	adds	r0, #1
 800176a:	783a      	ldrb	r2, [r7, #0]
 800176c:	3a30      	subs	r2, #48	; 0x30
 800176e:	2a09      	cmp	r2, #9
 8001770:	d803      	bhi.n	800177a <_svfiprintf_r+0x146>
 8001772:	fb04 2101 	mla	r1, r4, r1, r2
 8001776:	2301      	movs	r3, #1
 8001778:	e7f5      	b.n	8001766 <_svfiprintf_r+0x132>
 800177a:	b103      	cbz	r3, 800177e <_svfiprintf_r+0x14a>
 800177c:	9105      	str	r1, [sp, #20]
 800177e:	2203      	movs	r2, #3
 8001780:	7839      	ldrb	r1, [r7, #0]
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <_svfiprintf_r+0x1d8>)
 8001784:	f7fe fd24 	bl	80001d0 <memchr>
 8001788:	b140      	cbz	r0, 800179c <_svfiprintf_r+0x168>
 800178a:	2340      	movs	r3, #64	; 0x40
 800178c:	ebcb 0000 	rsb	r0, fp, r0
 8001790:	fa03 f000 	lsl.w	r0, r3, r0
 8001794:	9b04      	ldr	r3, [sp, #16]
 8001796:	4318      	orrs	r0, r3
 8001798:	9004      	str	r0, [sp, #16]
 800179a:	3701      	adds	r7, #1
 800179c:	7839      	ldrb	r1, [r7, #0]
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <_svfiprintf_r+0x1dc>)
 80017a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017a4:	2206      	movs	r2, #6
 80017a6:	1c7e      	adds	r6, r7, #1
 80017a8:	f7fe fd12 	bl	80001d0 <memchr>
 80017ac:	b188      	cbz	r0, 80017d2 <_svfiprintf_r+0x19e>
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <_svfiprintf_r+0x1e0>)
 80017b0:	b933      	cbnz	r3, 80017c0 <_svfiprintf_r+0x18c>
 80017b2:	9b03      	ldr	r3, [sp, #12]
 80017b4:	3307      	adds	r3, #7
 80017b6:	f023 0307 	bic.w	r3, r3, #7
 80017ba:	3308      	adds	r3, #8
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	e014      	b.n	80017ea <_svfiprintf_r+0x1b6>
 80017c0:	ab03      	add	r3, sp, #12
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	462a      	mov	r2, r5
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <_svfiprintf_r+0x1e4>)
 80017c8:	a904      	add	r1, sp, #16
 80017ca:	4640      	mov	r0, r8
 80017cc:	f3af 8000 	nop.w
 80017d0:	e007      	b.n	80017e2 <_svfiprintf_r+0x1ae>
 80017d2:	ab03      	add	r3, sp, #12
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	462a      	mov	r2, r5
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <_svfiprintf_r+0x1e4>)
 80017da:	a904      	add	r1, sp, #16
 80017dc:	4640      	mov	r0, r8
 80017de:	f000 f893 	bl	8001908 <_printf_i>
 80017e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80017e6:	4682      	mov	sl, r0
 80017e8:	d003      	beq.n	80017f2 <_svfiprintf_r+0x1be>
 80017ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ec:	4453      	add	r3, sl
 80017ee:	9309      	str	r3, [sp, #36]	; 0x24
 80017f0:	e742      	b.n	8001678 <_svfiprintf_r+0x44>
 80017f2:	89ab      	ldrh	r3, [r5, #12]
 80017f4:	065b      	lsls	r3, r3, #25
 80017f6:	d401      	bmi.n	80017fc <_svfiprintf_r+0x1c8>
 80017f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80017fa:	e001      	b.n	8001800 <_svfiprintf_r+0x1cc>
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	b01d      	add	sp, #116	; 0x74
 8001802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	08001df9 	.word	0x08001df9
 800180c:	08001dff 	.word	0x08001dff
 8001810:	08001e03 	.word	0x08001e03
 8001814:	00000000 	.word	0x00000000
 8001818:	08001581 	.word	0x08001581

0800181c <_printf_common>:
 800181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001820:	4691      	mov	r9, r2
 8001822:	461f      	mov	r7, r3
 8001824:	690a      	ldr	r2, [r1, #16]
 8001826:	688b      	ldr	r3, [r1, #8]
 8001828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800182c:	4293      	cmp	r3, r2
 800182e:	bfb8      	it	lt
 8001830:	4613      	movlt	r3, r2
 8001832:	f8c9 3000 	str.w	r3, [r9]
 8001836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800183a:	4606      	mov	r6, r0
 800183c:	460c      	mov	r4, r1
 800183e:	b112      	cbz	r2, 8001846 <_printf_common+0x2a>
 8001840:	3301      	adds	r3, #1
 8001842:	f8c9 3000 	str.w	r3, [r9]
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	0699      	lsls	r1, r3, #26
 800184a:	bf42      	ittt	mi
 800184c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001850:	3302      	addmi	r3, #2
 8001852:	f8c9 3000 	strmi.w	r3, [r9]
 8001856:	6825      	ldr	r5, [r4, #0]
 8001858:	f015 0506 	ands.w	r5, r5, #6
 800185c:	d110      	bne.n	8001880 <_printf_common+0x64>
 800185e:	f104 0a19 	add.w	sl, r4, #25
 8001862:	e007      	b.n	8001874 <_printf_common+0x58>
 8001864:	2301      	movs	r3, #1
 8001866:	4652      	mov	r2, sl
 8001868:	4639      	mov	r1, r7
 800186a:	4630      	mov	r0, r6
 800186c:	47c0      	blx	r8
 800186e:	3001      	adds	r0, #1
 8001870:	d01a      	beq.n	80018a8 <_printf_common+0x8c>
 8001872:	3501      	adds	r5, #1
 8001874:	68e3      	ldr	r3, [r4, #12]
 8001876:	f8d9 2000 	ldr.w	r2, [r9]
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	429d      	cmp	r5, r3
 800187e:	dbf1      	blt.n	8001864 <_printf_common+0x48>
 8001880:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	3300      	adds	r3, #0
 8001888:	bf18      	it	ne
 800188a:	2301      	movne	r3, #1
 800188c:	0692      	lsls	r2, r2, #26
 800188e:	d50f      	bpl.n	80018b0 <_printf_common+0x94>
 8001890:	18e1      	adds	r1, r4, r3
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	2030      	movs	r0, #48	; 0x30
 8001896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800189a:	4422      	add	r2, r4
 800189c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80018a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80018a4:	3302      	adds	r3, #2
 80018a6:	e003      	b.n	80018b0 <_printf_common+0x94>
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018b4:	4639      	mov	r1, r7
 80018b6:	4630      	mov	r0, r6
 80018b8:	47c0      	blx	r8
 80018ba:	3001      	adds	r0, #1
 80018bc:	d0f4      	beq.n	80018a8 <_printf_common+0x8c>
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	f8d9 5000 	ldr.w	r5, [r9]
 80018c4:	68e3      	ldr	r3, [r4, #12]
 80018c6:	f002 0206 	and.w	r2, r2, #6
 80018ca:	2a04      	cmp	r2, #4
 80018cc:	bf08      	it	eq
 80018ce:	1b5d      	subeq	r5, r3, r5
 80018d0:	6922      	ldr	r2, [r4, #16]
 80018d2:	68a3      	ldr	r3, [r4, #8]
 80018d4:	bf0c      	ite	eq
 80018d6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018da:	2500      	movne	r5, #0
 80018dc:	4293      	cmp	r3, r2
 80018de:	bfc4      	itt	gt
 80018e0:	1a9b      	subgt	r3, r3, r2
 80018e2:	18ed      	addgt	r5, r5, r3
 80018e4:	f04f 0900 	mov.w	r9, #0
 80018e8:	341a      	adds	r4, #26
 80018ea:	454d      	cmp	r5, r9
 80018ec:	d009      	beq.n	8001902 <_printf_common+0xe6>
 80018ee:	2301      	movs	r3, #1
 80018f0:	4622      	mov	r2, r4
 80018f2:	4639      	mov	r1, r7
 80018f4:	4630      	mov	r0, r6
 80018f6:	47c0      	blx	r8
 80018f8:	3001      	adds	r0, #1
 80018fa:	d0d5      	beq.n	80018a8 <_printf_common+0x8c>
 80018fc:	f109 0901 	add.w	r9, r9, #1
 8001900:	e7f3      	b.n	80018ea <_printf_common+0xce>
 8001902:	2000      	movs	r0, #0
 8001904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001908 <_printf_i>:
 8001908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800190c:	4617      	mov	r7, r2
 800190e:	7e0a      	ldrb	r2, [r1, #24]
 8001910:	b085      	sub	sp, #20
 8001912:	2a6e      	cmp	r2, #110	; 0x6e
 8001914:	4698      	mov	r8, r3
 8001916:	4606      	mov	r6, r0
 8001918:	460c      	mov	r4, r1
 800191a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800191c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001920:	f000 80ae 	beq.w	8001a80 <_printf_i+0x178>
 8001924:	d811      	bhi.n	800194a <_printf_i+0x42>
 8001926:	2a63      	cmp	r2, #99	; 0x63
 8001928:	d022      	beq.n	8001970 <_printf_i+0x68>
 800192a:	d809      	bhi.n	8001940 <_printf_i+0x38>
 800192c:	2a00      	cmp	r2, #0
 800192e:	f000 80bb 	beq.w	8001aa8 <_printf_i+0x1a0>
 8001932:	2a58      	cmp	r2, #88	; 0x58
 8001934:	f040 80ca 	bne.w	8001acc <_printf_i+0x1c4>
 8001938:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800193c:	4983      	ldr	r1, [pc, #524]	; (8001b4c <_printf_i+0x244>)
 800193e:	e055      	b.n	80019ec <_printf_i+0xe4>
 8001940:	2a64      	cmp	r2, #100	; 0x64
 8001942:	d01e      	beq.n	8001982 <_printf_i+0x7a>
 8001944:	2a69      	cmp	r2, #105	; 0x69
 8001946:	d01c      	beq.n	8001982 <_printf_i+0x7a>
 8001948:	e0c0      	b.n	8001acc <_printf_i+0x1c4>
 800194a:	2a73      	cmp	r2, #115	; 0x73
 800194c:	f000 80b0 	beq.w	8001ab0 <_printf_i+0x1a8>
 8001950:	d809      	bhi.n	8001966 <_printf_i+0x5e>
 8001952:	2a6f      	cmp	r2, #111	; 0x6f
 8001954:	d02e      	beq.n	80019b4 <_printf_i+0xac>
 8001956:	2a70      	cmp	r2, #112	; 0x70
 8001958:	f040 80b8 	bne.w	8001acc <_printf_i+0x1c4>
 800195c:	680a      	ldr	r2, [r1, #0]
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	600a      	str	r2, [r1, #0]
 8001964:	e03e      	b.n	80019e4 <_printf_i+0xdc>
 8001966:	2a75      	cmp	r2, #117	; 0x75
 8001968:	d024      	beq.n	80019b4 <_printf_i+0xac>
 800196a:	2a78      	cmp	r2, #120	; 0x78
 800196c:	d03a      	beq.n	80019e4 <_printf_i+0xdc>
 800196e:	e0ad      	b.n	8001acc <_printf_i+0x1c4>
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001976:	1d11      	adds	r1, r2, #4
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001980:	e0a8      	b.n	8001ad4 <_printf_i+0x1cc>
 8001982:	6821      	ldr	r1, [r4, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f011 0f80 	tst.w	r1, #128	; 0x80
 800198a:	d002      	beq.n	8001992 <_printf_i+0x8a>
 800198c:	1d11      	adds	r1, r2, #4
 800198e:	6019      	str	r1, [r3, #0]
 8001990:	e008      	b.n	80019a4 <_printf_i+0x9c>
 8001992:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001996:	f102 0104 	add.w	r1, r2, #4
 800199a:	6019      	str	r1, [r3, #0]
 800199c:	d002      	beq.n	80019a4 <_printf_i+0x9c>
 800199e:	f9b2 3000 	ldrsh.w	r3, [r2]
 80019a2:	e000      	b.n	80019a6 <_printf_i+0x9e>
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da3c      	bge.n	8001a24 <_printf_i+0x11c>
 80019aa:	222d      	movs	r2, #45	; 0x2d
 80019ac:	425b      	negs	r3, r3
 80019ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80019b2:	e037      	b.n	8001a24 <_printf_i+0x11c>
 80019b4:	6821      	ldr	r1, [r4, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019bc:	d002      	beq.n	80019c4 <_printf_i+0xbc>
 80019be:	1d11      	adds	r1, r2, #4
 80019c0:	6019      	str	r1, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <_printf_i+0xcc>
 80019c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80019c8:	f102 0104 	add.w	r1, r2, #4
 80019cc:	6019      	str	r1, [r3, #0]
 80019ce:	d001      	beq.n	80019d4 <_printf_i+0xcc>
 80019d0:	8813      	ldrh	r3, [r2, #0]
 80019d2:	e000      	b.n	80019d6 <_printf_i+0xce>
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	7e22      	ldrb	r2, [r4, #24]
 80019d8:	495c      	ldr	r1, [pc, #368]	; (8001b4c <_printf_i+0x244>)
 80019da:	2a6f      	cmp	r2, #111	; 0x6f
 80019dc:	bf14      	ite	ne
 80019de:	220a      	movne	r2, #10
 80019e0:	2208      	moveq	r2, #8
 80019e2:	e01b      	b.n	8001a1c <_printf_i+0x114>
 80019e4:	2278      	movs	r2, #120	; 0x78
 80019e6:	495a      	ldr	r1, [pc, #360]	; (8001b50 <_printf_i+0x248>)
 80019e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019f4:	f100 0504 	add.w	r5, r0, #4
 80019f8:	601d      	str	r5, [r3, #0]
 80019fa:	d103      	bne.n	8001a04 <_printf_i+0xfc>
 80019fc:	0655      	lsls	r5, r2, #25
 80019fe:	d501      	bpl.n	8001a04 <_printf_i+0xfc>
 8001a00:	8803      	ldrh	r3, [r0, #0]
 8001a02:	e000      	b.n	8001a06 <_printf_i+0xfe>
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	07d0      	lsls	r0, r2, #31
 8001a08:	bf44      	itt	mi
 8001a0a:	f042 0220 	orrmi.w	r2, r2, #32
 8001a0e:	6022      	strmi	r2, [r4, #0]
 8001a10:	b91b      	cbnz	r3, 8001a1a <_printf_i+0x112>
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	f022 0220 	bic.w	r2, r2, #32
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001a22:	e001      	b.n	8001a28 <_printf_i+0x120>
 8001a24:	4949      	ldr	r1, [pc, #292]	; (8001b4c <_printf_i+0x244>)
 8001a26:	220a      	movs	r2, #10
 8001a28:	6865      	ldr	r5, [r4, #4]
 8001a2a:	60a5      	str	r5, [r4, #8]
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	db08      	blt.n	8001a42 <_printf_i+0x13a>
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	f020 0004 	bic.w	r0, r0, #4
 8001a36:	6020      	str	r0, [r4, #0]
 8001a38:	b92b      	cbnz	r3, 8001a46 <_printf_i+0x13e>
 8001a3a:	2d00      	cmp	r5, #0
 8001a3c:	d17d      	bne.n	8001b3a <_printf_i+0x232>
 8001a3e:	4675      	mov	r5, lr
 8001a40:	e00c      	b.n	8001a5c <_printf_i+0x154>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d079      	beq.n	8001b3a <_printf_i+0x232>
 8001a46:	4675      	mov	r5, lr
 8001a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8001a4c:	fb02 3310 	mls	r3, r2, r0, r3
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001a56:	4603      	mov	r3, r0
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d1f5      	bne.n	8001a48 <_printf_i+0x140>
 8001a5c:	2a08      	cmp	r2, #8
 8001a5e:	d10b      	bne.n	8001a78 <_printf_i+0x170>
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	07da      	lsls	r2, r3, #31
 8001a64:	d508      	bpl.n	8001a78 <_printf_i+0x170>
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	6862      	ldr	r2, [r4, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	bfde      	ittt	le
 8001a6e:	2330      	movle	r3, #48	; 0x30
 8001a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a78:	ebc5 030e 	rsb	r3, r5, lr
 8001a7c:	6123      	str	r3, [r4, #16]
 8001a7e:	e02e      	b.n	8001ade <_printf_i+0x1d6>
 8001a80:	6808      	ldr	r0, [r1, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6949      	ldr	r1, [r1, #20]
 8001a86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a8a:	d003      	beq.n	8001a94 <_printf_i+0x18c>
 8001a8c:	1d10      	adds	r0, r2, #4
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	e008      	b.n	8001aa6 <_printf_i+0x19e>
 8001a94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a98:	f102 0004 	add.w	r0, r2, #4
 8001a9c:	6018      	str	r0, [r3, #0]
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	d001      	beq.n	8001aa6 <_printf_i+0x19e>
 8001aa2:	8019      	strh	r1, [r3, #0]
 8001aa4:	e000      	b.n	8001aa8 <_printf_i+0x1a0>
 8001aa6:	6019      	str	r1, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6123      	str	r3, [r4, #16]
 8001aac:	4675      	mov	r5, lr
 8001aae:	e016      	b.n	8001ade <_printf_i+0x1d6>
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	1d11      	adds	r1, r2, #4
 8001ab4:	6019      	str	r1, [r3, #0]
 8001ab6:	6815      	ldr	r5, [r2, #0]
 8001ab8:	6862      	ldr	r2, [r4, #4]
 8001aba:	2100      	movs	r1, #0
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7fe fb87 	bl	80001d0 <memchr>
 8001ac2:	b108      	cbz	r0, 8001ac8 <_printf_i+0x1c0>
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	6060      	str	r0, [r4, #4]
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	e004      	b.n	8001ad6 <_printf_i+0x1ce>
 8001acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ad0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	6123      	str	r3, [r4, #16]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ade:	f8cd 8000 	str.w	r8, [sp]
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	aa03      	add	r2, sp, #12
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f7ff fe97 	bl	800181c <_printf_common>
 8001aee:	3001      	adds	r0, #1
 8001af0:	d102      	bne.n	8001af8 <_printf_i+0x1f0>
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	e026      	b.n	8001b46 <_printf_i+0x23e>
 8001af8:	6923      	ldr	r3, [r4, #16]
 8001afa:	462a      	mov	r2, r5
 8001afc:	4639      	mov	r1, r7
 8001afe:	4630      	mov	r0, r6
 8001b00:	47c0      	blx	r8
 8001b02:	3001      	adds	r0, #1
 8001b04:	d0f5      	beq.n	8001af2 <_printf_i+0x1ea>
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	079b      	lsls	r3, r3, #30
 8001b0a:	d510      	bpl.n	8001b2e <_printf_i+0x226>
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	f104 0919 	add.w	r9, r4, #25
 8001b12:	e007      	b.n	8001b24 <_printf_i+0x21c>
 8001b14:	2301      	movs	r3, #1
 8001b16:	464a      	mov	r2, r9
 8001b18:	4639      	mov	r1, r7
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	47c0      	blx	r8
 8001b1e:	3001      	adds	r0, #1
 8001b20:	d0e7      	beq.n	8001af2 <_printf_i+0x1ea>
 8001b22:	3501      	adds	r5, #1
 8001b24:	68e3      	ldr	r3, [r4, #12]
 8001b26:	9a03      	ldr	r2, [sp, #12]
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	dbf2      	blt.n	8001b14 <_printf_i+0x20c>
 8001b2e:	68e0      	ldr	r0, [r4, #12]
 8001b30:	9b03      	ldr	r3, [sp, #12]
 8001b32:	4298      	cmp	r0, r3
 8001b34:	bfb8      	it	lt
 8001b36:	4618      	movlt	r0, r3
 8001b38:	e005      	b.n	8001b46 <_printf_i+0x23e>
 8001b3a:	780b      	ldrb	r3, [r1, #0]
 8001b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b44:	e78a      	b.n	8001a5c <_printf_i+0x154>
 8001b46:	b005      	add	sp, #20
 8001b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b4c:	08001e0a 	.word	0x08001e0a
 8001b50:	08001e1b 	.word	0x08001e1b

08001b54 <memcpy>:
 8001b54:	b510      	push	{r4, lr}
 8001b56:	1e43      	subs	r3, r0, #1
 8001b58:	440a      	add	r2, r1
 8001b5a:	4291      	cmp	r1, r2
 8001b5c:	d004      	beq.n	8001b68 <memcpy+0x14>
 8001b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b66:	e7f8      	b.n	8001b5a <memcpy+0x6>
 8001b68:	bd10      	pop	{r4, pc}

08001b6a <memmove>:
 8001b6a:	4288      	cmp	r0, r1
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	eb01 0302 	add.w	r3, r1, r2
 8001b72:	d801      	bhi.n	8001b78 <memmove+0xe>
 8001b74:	1e42      	subs	r2, r0, #1
 8001b76:	e00b      	b.n	8001b90 <memmove+0x26>
 8001b78:	4298      	cmp	r0, r3
 8001b7a:	d2fb      	bcs.n	8001b74 <memmove+0xa>
 8001b7c:	1881      	adds	r1, r0, r2
 8001b7e:	1ad2      	subs	r2, r2, r3
 8001b80:	42d3      	cmn	r3, r2
 8001b82:	d004      	beq.n	8001b8e <memmove+0x24>
 8001b84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001b8c:	e7f8      	b.n	8001b80 <memmove+0x16>
 8001b8e:	bd10      	pop	{r4, pc}
 8001b90:	4299      	cmp	r1, r3
 8001b92:	d004      	beq.n	8001b9e <memmove+0x34>
 8001b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001b9c:	e7f8      	b.n	8001b90 <memmove+0x26>
 8001b9e:	bd10      	pop	{r4, pc}

08001ba0 <_free_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	d046      	beq.n	8001c36 <_free_r+0x96>
 8001ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bac:	1f0c      	subs	r4, r1, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bfb8      	it	lt
 8001bb2:	18e4      	addlt	r4, r4, r3
 8001bb4:	f000 f8d6 	bl	8001d64 <__malloc_lock>
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <_free_r+0x98>)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	b913      	cbnz	r3, 8001bc6 <_free_r+0x26>
 8001bc0:	6063      	str	r3, [r4, #4]
 8001bc2:	6014      	str	r4, [r2, #0]
 8001bc4:	e032      	b.n	8001c2c <_free_r+0x8c>
 8001bc6:	42a3      	cmp	r3, r4
 8001bc8:	d90e      	bls.n	8001be8 <_free_r+0x48>
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	18a0      	adds	r0, r4, r2
 8001bce:	4283      	cmp	r3, r0
 8001bd0:	bf04      	itt	eq
 8001bd2:	6818      	ldreq	r0, [r3, #0]
 8001bd4:	685b      	ldreq	r3, [r3, #4]
 8001bd6:	6063      	str	r3, [r4, #4]
 8001bd8:	bf04      	itt	eq
 8001bda:	1812      	addeq	r2, r2, r0
 8001bdc:	6022      	streq	r2, [r4, #0]
 8001bde:	600c      	str	r4, [r1, #0]
 8001be0:	e024      	b.n	8001c2c <_free_r+0x8c>
 8001be2:	42a2      	cmp	r2, r4
 8001be4:	d803      	bhi.n	8001bee <_free_r+0x4e>
 8001be6:	4613      	mov	r3, r2
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d1f9      	bne.n	8001be2 <_free_r+0x42>
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	1819      	adds	r1, r3, r0
 8001bf2:	42a1      	cmp	r1, r4
 8001bf4:	d10b      	bne.n	8001c0e <_free_r+0x6e>
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	4401      	add	r1, r0
 8001bfa:	1858      	adds	r0, r3, r1
 8001bfc:	4282      	cmp	r2, r0
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	d114      	bne.n	8001c2c <_free_r+0x8c>
 8001c02:	6810      	ldr	r0, [r2, #0]
 8001c04:	6852      	ldr	r2, [r2, #4]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	4401      	add	r1, r0
 8001c0a:	6019      	str	r1, [r3, #0]
 8001c0c:	e00e      	b.n	8001c2c <_free_r+0x8c>
 8001c0e:	d902      	bls.n	8001c16 <_free_r+0x76>
 8001c10:	230c      	movs	r3, #12
 8001c12:	602b      	str	r3, [r5, #0]
 8001c14:	e00a      	b.n	8001c2c <_free_r+0x8c>
 8001c16:	6821      	ldr	r1, [r4, #0]
 8001c18:	1860      	adds	r0, r4, r1
 8001c1a:	4282      	cmp	r2, r0
 8001c1c:	bf04      	itt	eq
 8001c1e:	6810      	ldreq	r0, [r2, #0]
 8001c20:	6852      	ldreq	r2, [r2, #4]
 8001c22:	6062      	str	r2, [r4, #4]
 8001c24:	bf04      	itt	eq
 8001c26:	1809      	addeq	r1, r1, r0
 8001c28:	6021      	streq	r1, [r4, #0]
 8001c2a:	605c      	str	r4, [r3, #4]
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c32:	f000 b898 	b.w	8001d66 <__malloc_unlock>
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
 8001c38:	20000088 	.word	0x20000088

08001c3c <_malloc_r>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	1ccd      	adds	r5, r1, #3
 8001c40:	f025 0503 	bic.w	r5, r5, #3
 8001c44:	3508      	adds	r5, #8
 8001c46:	2d0c      	cmp	r5, #12
 8001c48:	bf38      	it	cc
 8001c4a:	250c      	movcc	r5, #12
 8001c4c:	2d00      	cmp	r5, #0
 8001c4e:	4606      	mov	r6, r0
 8001c50:	db01      	blt.n	8001c56 <_malloc_r+0x1a>
 8001c52:	42a9      	cmp	r1, r5
 8001c54:	d902      	bls.n	8001c5c <_malloc_r+0x20>
 8001c56:	230c      	movs	r3, #12
 8001c58:	6033      	str	r3, [r6, #0]
 8001c5a:	e046      	b.n	8001cea <_malloc_r+0xae>
 8001c5c:	f000 f882 	bl	8001d64 <__malloc_lock>
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <_malloc_r+0xb4>)
 8001c62:	681c      	ldr	r4, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4621      	mov	r1, r4
 8001c68:	b1a1      	cbz	r1, 8001c94 <_malloc_r+0x58>
 8001c6a:	680b      	ldr	r3, [r1, #0]
 8001c6c:	1b5b      	subs	r3, r3, r5
 8001c6e:	d40e      	bmi.n	8001c8e <_malloc_r+0x52>
 8001c70:	2b0b      	cmp	r3, #11
 8001c72:	d903      	bls.n	8001c7c <_malloc_r+0x40>
 8001c74:	600b      	str	r3, [r1, #0]
 8001c76:	18cc      	adds	r4, r1, r3
 8001c78:	50cd      	str	r5, [r1, r3]
 8001c7a:	e01e      	b.n	8001cba <_malloc_r+0x7e>
 8001c7c:	428c      	cmp	r4, r1
 8001c7e:	bf0d      	iteet	eq
 8001c80:	6863      	ldreq	r3, [r4, #4]
 8001c82:	684b      	ldrne	r3, [r1, #4]
 8001c84:	6063      	strne	r3, [r4, #4]
 8001c86:	6013      	streq	r3, [r2, #0]
 8001c88:	bf18      	it	ne
 8001c8a:	460c      	movne	r4, r1
 8001c8c:	e015      	b.n	8001cba <_malloc_r+0x7e>
 8001c8e:	460c      	mov	r4, r1
 8001c90:	6849      	ldr	r1, [r1, #4]
 8001c92:	e7e9      	b.n	8001c68 <_malloc_r+0x2c>
 8001c94:	4c17      	ldr	r4, [pc, #92]	; (8001cf4 <_malloc_r+0xb8>)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	b91b      	cbnz	r3, 8001ca2 <_malloc_r+0x66>
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f000 f852 	bl	8001d44 <_sbrk_r>
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f000 f84d 	bl	8001d44 <_sbrk_r>
 8001caa:	1c43      	adds	r3, r0, #1
 8001cac:	d018      	beq.n	8001ce0 <_malloc_r+0xa4>
 8001cae:	1cc4      	adds	r4, r0, #3
 8001cb0:	f024 0403 	bic.w	r4, r4, #3
 8001cb4:	42a0      	cmp	r0, r4
 8001cb6:	d10d      	bne.n	8001cd4 <_malloc_r+0x98>
 8001cb8:	6025      	str	r5, [r4, #0]
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f000 f853 	bl	8001d66 <__malloc_unlock>
 8001cc0:	f104 000b 	add.w	r0, r4, #11
 8001cc4:	1d23      	adds	r3, r4, #4
 8001cc6:	f020 0007 	bic.w	r0, r0, #7
 8001cca:	1ac3      	subs	r3, r0, r3
 8001ccc:	d00e      	beq.n	8001cec <_malloc_r+0xb0>
 8001cce:	425a      	negs	r2, r3
 8001cd0:	50e2      	str	r2, [r4, r3]
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
 8001cd4:	1a21      	subs	r1, r4, r0
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	f000 f834 	bl	8001d44 <_sbrk_r>
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d1eb      	bne.n	8001cb8 <_malloc_r+0x7c>
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	6033      	str	r3, [r6, #0]
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f000 f83e 	bl	8001d66 <__malloc_unlock>
 8001cea:	2000      	movs	r0, #0
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000088 	.word	0x20000088
 8001cf4:	20000084 	.word	0x20000084

08001cf8 <_realloc_r>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4607      	mov	r7, r0
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	460e      	mov	r6, r1
 8001d00:	b921      	cbnz	r1, 8001d0c <_realloc_r+0x14>
 8001d02:	4611      	mov	r1, r2
 8001d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d08:	f7ff bf98 	b.w	8001c3c <_malloc_r>
 8001d0c:	b91a      	cbnz	r2, 8001d16 <_realloc_r+0x1e>
 8001d0e:	f7ff ff47 	bl	8001ba0 <_free_r>
 8001d12:	4628      	mov	r0, r5
 8001d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d16:	f000 f827 	bl	8001d68 <_malloc_usable_size_r>
 8001d1a:	4285      	cmp	r5, r0
 8001d1c:	d90e      	bls.n	8001d3c <_realloc_r+0x44>
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4638      	mov	r0, r7
 8001d22:	f7ff ff8b 	bl	8001c3c <_malloc_r>
 8001d26:	4604      	mov	r4, r0
 8001d28:	b150      	cbz	r0, 8001d40 <_realloc_r+0x48>
 8001d2a:	4631      	mov	r1, r6
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	f7ff ff11 	bl	8001b54 <memcpy>
 8001d32:	4631      	mov	r1, r6
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff ff33 	bl	8001ba0 <_free_r>
 8001d3a:	e001      	b.n	8001d40 <_realloc_r+0x48>
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d40:	4620      	mov	r0, r4
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d44 <_sbrk_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4c06      	ldr	r4, [pc, #24]	; (8001d60 <_sbrk_r+0x1c>)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	6023      	str	r3, [r4, #0]
 8001d50:	f000 f814 	bl	8001d7c <_sbrk>
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	d102      	bne.n	8001d5e <_sbrk_r+0x1a>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	b103      	cbz	r3, 8001d5e <_sbrk_r+0x1a>
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	200000a4 	.word	0x200000a4

08001d64 <__malloc_lock>:
 8001d64:	4770      	bx	lr

08001d66 <__malloc_unlock>:
 8001d66:	4770      	bx	lr

08001d68 <_malloc_usable_size_r>:
 8001d68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	bfbe      	ittt	lt
 8001d70:	1809      	addlt	r1, r1, r0
 8001d72:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8001d76:	18c0      	addlt	r0, r0, r3
 8001d78:	3804      	subs	r0, #4
 8001d7a:	4770      	bx	lr

08001d7c <_sbrk>:
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <_sbrk+0x14>)
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	4602      	mov	r2, r0
 8001d82:	b909      	cbnz	r1, 8001d88 <_sbrk+0xc>
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <_sbrk+0x18>)
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	4402      	add	r2, r0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4770      	bx	lr
 8001d90:	2000008c 	.word	0x2000008c
 8001d94:	200000a8 	.word	0x200000a8

08001d98 <_init>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr

08001da4 <_fini>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	bf00      	nop
 8001da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001daa:	bc08      	pop	{r3}
 8001dac:	469e      	mov	lr, r3
 8001dae:	4770      	bx	lr
